[
["index.html", "OMM report Section 1 Setup 1.1 Installation 1.2 Generate report", " OMM report Philipp C. Muench 2020-06-04 Section 1 Setup 1.1 Installation rm(list = ls()) source(&quot;utils.R&quot;) library(&quot;vcfR&quot;) library(&quot;rmdformats&quot;) library(&quot;ggplot2&quot;) library(&quot;reshape2&quot;) library(&quot;ggridges&quot;) library(&quot;knitr&quot;) library(&quot;kableExtra&quot;) library(&quot;plotly&quot;) library(&quot;DT&quot;) library(&quot;circlize&quot;) library(&quot;ComplexHeatmap&quot;) library(&quot;rtracklayer&quot;) library(&quot;bookdown&quot;) Note: for rtracklayer you might need curl sudo apt-get install libcurl4-openssl-dev You need to install Pandoc. 1.2 Generate report setwd(&quot;~/Cloud/ActiveProjects/OligoMM-report&quot;) bookdown::serve_book(getwd()) # servr::daemon_stop(1) This will starts a browser window pointing to http://127.0.0.1:7853 presenting the report written in R Markdown and will update as soon as there are changes on .Rmd files in the workspace. To end bookdown server type servr::daemon_stop(1) where 1 is the ID of the server running bookdown::render_book(getwd()) ## Data structure data/raw files from host machine, contains coverage, lofreq and varscan output data/annotation annotation files for OMM12 genomes e.g. phage location (pro-hunter, fasta files and Prokka annotation) data/tables tables in tsv format for e.g. import with Excel data/annotation/gff Prokka annotation data/rda processed raw data in rds format generated by 01-load-data.rmd docs html files generated via bookdown::serve_book(getwd()) "],
["claudia-samples.html", "Section 2 Claudia Samples 2.1 Experiment 2.2 Metadata", " Section 2 Claudia Samples 2.1 Experiment 2.2 Metadata design.df &lt;- read.table(&quot;data/sample_mapping.tsv&quot;, header = T, sep = &quot;\\t&quot;) DT::datatable(design.df) ## OligoMM ID phylum species YL44 Verrucomicrobia A. muciniphila I48 Bacteroidetes B. caecimuris YL27 Bacteroidetes M. intestinale YL45 Proteobacteria T. muris YL2 Actinobacteria B. longum KB1 Firmicutes E. faecalis KB18 Firmicutes A. muris YL32 Firmicutes C. clostridioforme YL31 Firmicutes F. plautii YL58 Firmicutes B. coccoides I49 Firmicutes L. reuteri I46 Firmicutes C. innocuum 2.2.1 CRISPR based on Prokka [17:07:29] Searching for CRISPR repeats [17:07:30] CRISPR1 CP022722.1 1722776 with 6 spacers [17:07:30] CRISPR2 CP022722.1 3488656 with 4 spacers [17:07:30] CRISPR3 NHMT01000001.1 1999785 with 7 spacers [17:07:31] CRISPR4 NHMR02000002.1 214427 with 78 spacers [17:07:31] CRISPR5 NHMQ01000003.1 694333 with 9 spacers [17:07:31] CRISPR6 NHTR01000003.1 394380 with 20 spacers [17:07:31] CRISPR7 NHTR01000010.1 319 with 15 spacers [17:07:32] CRISPR8 CP021420.1 425056 with 20 spacers [17:07:32] CRISPR9 CP021420.1 434834 with 8 spacers [17:07:32] CRISPR10 NHMP01000001.1 344218 with 8 spacers [17:07:32] CRISPR11 NHMP01000001.1 403754 with 8 spacers [17:07:32] CRISPR12 NHMP01000007.1 29696 with 51 spacers [17:07:32] CRISPR13 NHMP01000007.1 50690 with 46 spacers [17:07:32] CRISPR14 CP022713.1 372223 with 14 spacers [17:07:32] CRISPR15 CP022713.1 3331136 with 7 spacers "],
["resequencing-samples.html", "Section 3 Resequencing Samples 3.1 Metadata 3.2 Load in variants 3.3 KB1 3.4 I46 3.5 YL58 3.6 mutation bias? 3.7 heatmap 3.8 visualize coverage", " Section 3 Resequencing Samples 3.1 Metadata Sample Genome Group Species DR4 KB1 1687 Enterococcus_faecalis DR1 KB1 1681 Enterococcus_faecalis DR8 KB1 1691 Enterococcus_faecalis DR11 KB1 1696 Enterococcus_faecalis DR3 I46 1681 Clostridium_innocuum DR6 I46 1687 Clostridium_innocuum DR10 I46 1691 Clostridium_innocuum DR12 I46 1696 Clostridium_innocuum DR7 YL58 1687 Blautia_coccoides DR13 YL58 1696 Blautia_coccoides 3.2 Load in variants source(&quot;utils.R&quot;) orf_shapes = c(coding = 15, `non-coding` = 3) vcfToDataframe &lt;- function(vcf.files, contig_mapping = contig_mapping, gff.df = gff.df) { require(vcfR) res &lt;- list() for (file in vcf.files) { # message(file) library(data.table) vcf.content &lt;- vcfR::read.vcfR(file, verbose = FALSE) vcf.fix &lt;- as.data.frame(vcf.content@fix) # contains chr, position and substitution informations vcf.info &lt;- vcfR::INFO2df(vcf.content) # get INFO field, contains DP, AF informations # no annotation since they are not yet processed with snpEff vcf.ann &lt;- data.frame(do.call(&#39;rbind&#39;, strsplit(as.character(vcf.info$ANN),&#39;|&#39;,fixed = TRUE))) # split ANN field, contains information if files are processed by snpEff there are variants if (nrow(vcf.fix) &gt; 0) { dat &lt;- as.data.frame(cbind(vcf.fix[, c(1, 2, 4, 5, 6)], vcf.info[, c(1, 2)])) dat$majorAF &lt;- sapply(dat$AF, minorAfToMajorAf) # transforms e.g. AF of 0.1 to 0.9, 0.9 stays 0.9 and 0.5 stays 0.5 dat$genome &lt;- contig_mapping[match(dat$CHROM, contig_mapping$contig), ]$genome # map chr information to genome name e.g. NHMU01000001.1 -&gt; i48 dat$genome_hr &lt;- translateGenomeIdToFullName(tolower(dat$genome)) dat$mouse.id &lt;- translateSampletoMouse(tools::file_path_sans_ext(basename(file))) dat$mouse.group &lt;- translateMouseIdToTreatmentGroup(translateSampletoMouse(tools::file_path_sans_ext(basename(file)))) dat$dp &lt;- as.numeric(as.matrix(vcf.info$DP)) dt.gff &lt;- data.table(start = gff.df$start, end = gff.df$end, chr = as.character(as.matrix(gff.df$chr)), feature = gff.df$product) colnames(dat)[1:2] &lt;- c(&quot;chr&quot;, &quot;start&quot;) dat$start &lt;- as.integer(as.matrix(dat$start)) dat$chr &lt;- as.character(as.matrix(dat$chr)) dat$end &lt;- dat$start dat2 &lt;- as.data.table(dat) setkey(dt.gff, chr, start, end) annotated &lt;- foverlaps(dat2, dt.gff, type = &quot;within&quot;, mult = &quot;first&quot;) res[[tools::file_path_sans_ext(basename(file))]] &lt;- annotated # add vcf df to list } else { message(&quot;Skipping&quot;) } } df &lt;- as.data.frame(do.call(rbind, res)) # merge list to df return(df) } gff.files &lt;- Sys.glob(&quot;data/references/gff/*.gff&quot;) gff.df &lt;- NULL for (gff.file in gff.files) { message(gff.file) gff &lt;- rtracklayer::readGFF(gff.file) # subset since different columns are present on gff files relevant &lt;- data.frame(start = gff$start, end = gff$end, type = as.character(as.matrix(gff$type)), gene = as.character(as.matrix(gff$gene)), product = as.character(as.matrix(gff$product)), chr = as.character(as.matrix(gff$seqid))) relevant$genome &lt;- substr(basename(gff.file), 1, nchar(basename(gff.file)) - 4) gff.df &lt;- rbind(gff.df, relevant) } ## data/references/gff/I46.gff ## data/references/gff/KB1.gff ## data/references/gff/YL58.gff contig_mapping &lt;- read.csv2(&quot;data/contig_mapping_new_ref.csv&quot;, sep = &quot;;&quot;, header = T, stringsAsFactors = F) # this file contains contig names of the 12 OligoMM genomes vcf.files &lt;- Sys.glob(&quot;reseq/vcf_files/*.vcf&quot;) vcf.samples &lt;- suppressWarnings(vcfToDataframe(vcf.files, contig_mapping, gff.df = gff.df)) ## data.table 1.12.6 using 6 threads (see ?getDTthreads). Latest news: r-datatable.com ## ## Attaching package: &#39;data.table&#39; ## The following object is masked from &#39;package:GenomicRanges&#39;: ## ## shift ## The following object is masked from &#39;package:IRanges&#39;: ## ## shift ## The following objects are masked from &#39;package:S4Vectors&#39;: ## ## first, second ## The following objects are masked from &#39;package:reshape2&#39;: ## ## dcast, melt ## Loading required package: dplyr ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:data.table&#39;: ## ## between, first, last ## The following objects are masked from &#39;package:GenomicRanges&#39;: ## ## intersect, setdiff, union ## The following object is masked from &#39;package:GenomeInfoDb&#39;: ## ## intersect ## The following objects are masked from &#39;package:IRanges&#39;: ## ## collapse, desc, intersect, setdiff, slice, union ## The following objects are masked from &#39;package:S4Vectors&#39;: ## ## first, intersect, rename, setdiff, setequal, union ## The following objects are masked from &#39;package:BiocGenerics&#39;: ## ## combine, intersect, setdiff, union ## The following object is masked from &#39;package:kableExtra&#39;: ## ## group_rows ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union vcf.samples$feature &lt;- as.character(as.matrix(vcf.samples$feature)) vcf.samples[which(is.na(vcf.samples$feature)), ]$feature &lt;- &quot;outside ORFs&quot; vcf.samples[which(vcf.samples$feature == &quot;hypothetical protein&quot;), ]$feature &lt;- &quot;hypothetical proteins&quot; vcf.samples$start &lt;- NULL vcf.samples$end &lt;- NULL vcf.samples$i.end &lt;- NULL colnames(vcf.samples)[3] &lt;- &quot;POS&quot; saveRDS(vcf.samples, file = &quot;data/rds/reseq.rds&quot;) p &lt;- ggplot(vcf.samples, aes(AF, fill = genome)) + geom_histogram() p &lt;- p + facet_grid(mouse.id + mouse.group ~ genome + genome_hr) p &lt;- p + theme_classic() + xlab(&quot;AF&quot;) + ylab(&quot;occurence&quot;) print(p) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Figure 3.1: AF of resequenced strains p &lt;- ggplot(vcf.samples, aes(majorAF, fill = genome)) + geom_histogram() p &lt;- p + facet_grid(mouse.id + mouse.group ~ genome + genome_hr) p &lt;- p + theme_classic() + xlab(&quot;AF&quot;) + ylab(&quot;occurence&quot;) print(p) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Figure 3.2: major AF of resequenced strains dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) write.table(dat, file = &quot;data/tables/reseq_all.tsv&quot;, sep = &quot;\\t&quot;, row.names = F, quote = F) pairedAFplot &lt;- function(dat = dat, case = &quot;Water&quot;, control = &quot;Ciprofloxacin&quot;) { require(reshape2) require(ggplot2) dat.pair &lt;- dat[which(dat$mouse.group == case | dat$mouse.group == control), ] # dat.pair &lt;- dat.pair[which(dat.pair$genome == genome),] # dat.pair &lt;- dat.pair[which(!is.na(dat.pair$feature)),] data.wide &lt;- dcast(dat.pair, genome + POS + REF + ALT + feature ~ mouse.group, value.var = &quot;AF&quot;) data.wide$vartype &lt;- ifelse(as.character(data.wide$feature) != &quot;outside ORFs&quot;, &quot;coding&quot;, &quot;non-coding&quot;) data.wide &lt;- data.wide[which(data.wide$vartype != 0), ] colnames(data.wide)[6] &lt;- &quot;sample_1&quot; colnames(data.wide)[7] &lt;- &quot;sample_2&quot; data.wide[is.na(data.wide)] &lt;- 0 p &lt;- ggplot(data.wide, aes(x = sample_1, y = sample_2, label = feature, color = genome, shape = vartype)) p &lt;- p + geom_point(fill = NA) + theme_classic() # + scale_color_manual(values = omm_colors) p &lt;- p + theme(aspect.ratio = 1) p &lt;- p + geom_hline(yintercept = 0.5, linetype = 2, color = &quot;grey50&quot;) p &lt;- p + geom_vline(xintercept = 0.5, linetype = 2, color = &quot;grey50&quot;) p &lt;- p + scale_shape_manual(values = orf_shapes) p &lt;- p + theme(aspect.ratio = 1) p &lt;- p + theme(strip.background = element_blank()) p &lt;- p + geom_abline(intercept = 0, slope = 1) p &lt;- p + xlab(case) + ylab(control) p &lt;- p + theme(panel.border = element_rect(colour = &quot;black&quot;, fill = NA, size = 1)) return(p) } suppressWarnings(ggplotly(pairedAFplot(dat, case = &quot;Water&quot;, control = &quot;Ciprofloxacin&quot;))) Figure 3.3: Scatter plot of AF of two samples. Only variants with functional annotation are shown suppressWarnings(ggplotly(pairedAFplot(dat, case = &quot;Water&quot;, control = &quot;Tetracyclin&quot;))) Figure 3.4: Scatter plot of AF of two samples. Only variants with functional annotation are shown suppressWarnings(ggplotly(pairedAFplot(dat, case = &quot;Water&quot;, control = &quot;Vancomycin&quot;))) Figure 3.5: Scatter plot of AF of two samples. Only variants with functional annotation are shown dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) dat$ref_size &lt;- nchar(as.character(as.matrix(dat$REF))) dat$alt_size &lt;- nchar(as.character(as.matrix(dat$ALT))) dat$alteration &lt;- paste(as.character(dat$REF), &quot;-&gt;&quot;, as.character(dat$ALT)) # no grid version for html geneCentricPlot2 &lt;- function(dat = dat, genome = &quot;KB1&quot;, type = &quot;SNP&quot;) { require(reshape2) require(ggplot2) dat.subset &lt;- dat[which(dat$genome == genome), ] if (type == &quot;SNP&quot;) { dat.subset &lt;- dat.subset[which(dat.subset$ref_size == 1 &amp; dat.subset$alt_size == 1), ] } else if (type == &quot;insertion&quot;) { dat.subset &lt;- dat.subset[which(dat.subset$ref_size == 1 &amp; dat.subset$alt_size &gt; 1), ] } else { # deletion dat.subset &lt;- dat.subset[which(dat.subset$ref_size &gt; 1 &amp; dat.subset$alt_size == 1), ] } dat.subset$ID &lt;- paste0(dat.subset$POS, &quot;|&quot;, dat.subset$REF, &quot;-&gt;&quot;, dat.subset$ALT) p &lt;- ggplot(dat.subset, aes(x = feature, y = AF, color = mouse.group, label = alteration)) p &lt;- p + geom_point(size = 2, fill = NA) p &lt;- p + coord_flip() + theme_classic() p &lt;- p + ylim(c(0, 1)) p &lt;- p + theme(strip.background = element_blank()) + theme(strip.text.y = element_text(angle = 0), strip.placement = &quot;outside&quot;) p &lt;- p + xlab(&quot;&quot;) + ylab(&quot;allele frequency&quot;) return(p) } 3.3 KB1 3.3.1 SNP suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;KB1&quot;, type = &quot;SNP&quot;))) Figure 3.6: AF by function of one genome 3.3.2 insertion suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;KB1&quot;, type = &quot;insertion&quot;))) Figure 3.7: AF by function of one genome 3.3.3 deletion suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;KB1&quot;, type = &quot;deletion&quot;))) Figure 3.8: AF by function of one genome 3.4 I46 3.4.1 SNP suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;I46&quot;, type = &quot;SNP&quot;))) Figure 3.9: AF by function of one genome 3.4.2 insertion suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;I46&quot;, type = &quot;insertion&quot;))) Figure 3.10: AF by function of one genome 3.4.3 deletion suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;I46&quot;, type = &quot;deletion&quot;))) Figure 3.11: AF by function of one genome 3.5 YL58 3.5.1 SNP suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;YL58&quot;, type = &quot;SNP&quot;))) Figure 3.12: AF by function of one genome 3.5.2 insertion suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;YL58&quot;, type = &quot;insertion&quot;))) Figure 3.13: AF by function of one genome 3.5.3 deletion suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;YL58&quot;, type = &quot;deletion&quot;))) Figure 3.14: AF by function of one genome 3.6 mutation bias? 3.6.1 SNP dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) dat$ref_size &lt;- nchar(as.character(as.matrix(dat$REF))) dat$alt_size &lt;- nchar(as.character(as.matrix(dat$ALT))) dat &lt;- dat[which(dat$ref_size == 1 &amp; dat$alt_size == 1), ] dat$alteration &lt;- paste(as.character(dat$REF), &quot;-&gt;&quot;, as.character(dat$ALT)) dat$dummy &lt;- 1 dat.agg &lt;- aggregate(dummy ~ genome + mouse.group + alteration, dat, sum) p &lt;- ggplot(dat.agg, aes(x = mouse.group, y = dummy, label = alteration, color = genome)) p &lt;- p + geom_text() + facet_grid(~genome) + ylab(&quot;occurrence&quot;) p &lt;- p + stat_summary(fun.y = mean, geom = &quot;line&quot;, aes(group = alteration), alpha = 0.1) p &lt;- p + theme_classic() # + scale_color_manual(values = omm_colors) ggplotly(p) 3.6.2 insertions dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) dat$ref_size &lt;- nchar(as.character(as.matrix(dat$REF))) dat$alt_size &lt;- nchar(as.character(as.matrix(dat$ALT))) dat &lt;- dat[which(dat$alt_size &gt; dat$ref_size), ] dat$alteration &lt;- paste(as.character(dat$REF), &quot;-&gt;&quot;, as.character(dat$ALT)) dat$dummy &lt;- 1 dat.agg &lt;- aggregate(dummy ~ genome + mouse.group + alteration, dat, sum) p &lt;- ggplot(dat.agg, aes(x = mouse.group, y = dummy, label = alteration, color = genome)) p &lt;- p + geom_text() + facet_grid(~genome) + ylab(&quot;occurrence&quot;) p &lt;- p + stat_summary(fun.y = mean, geom = &quot;line&quot;, aes(group = alteration), alpha = 0.1) p &lt;- p + theme_classic() # + scale_color_manual(values = omm_colors) ggplotly(p) 3.6.3 deletions dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) dat$ref_size &lt;- nchar(as.character(as.matrix(dat$REF))) dat$alt_size &lt;- nchar(as.character(as.matrix(dat$ALT))) dat &lt;- dat[which(dat$alt_size &lt; dat$ref_size), ] dat$alteration &lt;- paste(as.character(dat$REF), &quot;-&gt;&quot;, as.character(dat$ALT)) dat$dummy &lt;- 1 dat.agg &lt;- aggregate(dummy ~ genome + mouse.group + alteration, dat, sum) p &lt;- ggplot(dat.agg, aes(x = mouse.group, y = dummy, label = alteration, color = genome)) p &lt;- p + geom_text() + facet_grid(~genome) + ylab(&quot;occurrence&quot;) p &lt;- p + stat_summary(fun.y = mean, geom = &quot;line&quot;, aes(group = alteration), alpha = 0.1) p &lt;- p + theme_classic() # + scale_color_manual(values = omm_colors) ggplotly(p) 3.7 heatmap 3.7.1 KB1 dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) # dat &lt;- dat[which(dat$mouse.group == &#39;Water&#39; | dat$mouse.group == &#39;Tetracyclin&#39; ),] data.wide &lt;- dcast(dat, genome + POS + REF + ALT + feature ~ mouse.group, value.var = &quot;AF&quot;) ## Warning in dcast(dat, genome + POS + REF + ALT + feature ~ mouse.group, : The dcast generic in data.table has been passed a data.frame and will attempt to redirect to the reshape2::dcast; please note that reshape2 is deprecated, and this redirection is now deprecated as well. Please do this redirection yourself like ## reshape2::dcast(dat). In the next version, this warning will become an error. data.wide &lt;- data.wide[which(data.wide$genome == &quot;KB1&quot;), ] rownames(data.wide) &lt;- paste0(data.wide$POS, &quot;-&quot;, data.wide$REF, &quot;-&quot;, data.wide$ALT) heat &lt;- data.matrix(data.wide[, 6:9]) library(circlize) library(ComplexHeatmap) heat[is.na(heat)] &lt;- 0 col_fun = colorRamp2(c(0, 0.5, 1), c(&quot;white&quot;, &quot;yellow&quot;, &quot;red&quot;)) Heatmap(heat, name = &quot;AF&quot;, col = col_fun, column_names_gp = gpar(fontsize = 15), row_names_gp = gpar(fontsize = 3), show_row_dend = F, show_row_names = F, show_column_dend = F) 3.7.2 I46 dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) # dat &lt;- dat[which(dat$mouse.group == &#39;Water&#39; | dat$mouse.group == &#39;Tetracyclin&#39; ),] data.wide &lt;- dcast(dat, genome + POS + REF + ALT + feature ~ mouse.group, value.var = &quot;AF&quot;) ## Warning in dcast(dat, genome + POS + REF + ALT + feature ~ mouse.group, : The dcast generic in data.table has been passed a data.frame and will attempt to redirect to the reshape2::dcast; please note that reshape2 is deprecated, and this redirection is now deprecated as well. Please do this redirection yourself like ## reshape2::dcast(dat). In the next version, this warning will become an error. data.wide &lt;- data.wide[which(data.wide$genome == &quot;I46&quot;), ] rownames(data.wide) &lt;- paste0(data.wide$POS, &quot;-&quot;, data.wide$REF, &quot;-&quot;, data.wide$ALT) heat &lt;- data.matrix(data.wide[, 6:9]) library(circlize) library(ComplexHeatmap) heat[is.na(heat)] &lt;- 0 col_fun = colorRamp2(c(0, 0.5, 1), c(&quot;white&quot;, &quot;yellow&quot;, &quot;red&quot;)) Heatmap(heat, name = &quot;AF&quot;, col = col_fun, column_names_gp = gpar(fontsize = 15), row_names_gp = gpar(fontsize = 9), show_row_names = F, show_row_dend = F, show_column_dend = F) 3.7.3 YL58 dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) # dat &lt;- dat[which(dat$mouse.group == &#39;Water&#39; | dat$mouse.group == &#39;Tetracyclin&#39; ),] data.wide &lt;- dcast(dat, genome + POS + REF + ALT + feature ~ mouse.group, value.var = &quot;AF&quot;) ## Warning in dcast(dat, genome + POS + REF + ALT + feature ~ mouse.group, : The dcast generic in data.table has been passed a data.frame and will attempt to redirect to the reshape2::dcast; please note that reshape2 is deprecated, and this redirection is now deprecated as well. Please do this redirection yourself like ## reshape2::dcast(dat). In the next version, this warning will become an error. data.wide &lt;- data.wide[which(data.wide$genome == &quot;YL58&quot;), ] rownames(data.wide) &lt;- paste0(data.wide$POS, &quot;-&quot;, data.wide$REF, &quot;-&quot;, data.wide$ALT) heat &lt;- data.matrix(data.wide[, 6:9]) library(circlize) library(ComplexHeatmap) heat[is.na(heat)] &lt;- 0 col_fun = colorRamp2(c(0, 0.5, 1), c(&quot;white&quot;, &quot;yellow&quot;, &quot;red&quot;)) Heatmap(heat, name = &quot;AF&quot;, col = col_fun, column_names_gp = gpar(fontsize = 9), row_names_gp = gpar(fontsize = 9), show_row_dend = F, show_row_names = F, show_column_dend = F) 3.7.4 Filter: present in all 3.7.5 KB1 dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) # dat &lt;- dat[which(dat$mouse.group == &#39;Water&#39; | dat$mouse.group == &#39;Tetracyclin&#39; ),] data.wide &lt;- dcast(dat, genome + POS + REF + ALT + feature ~ mouse.group, value.var = &quot;AF&quot;) ## Warning in dcast(dat, genome + POS + REF + ALT + feature ~ mouse.group, : The dcast generic in data.table has been passed a data.frame and will attempt to redirect to the reshape2::dcast; please note that reshape2 is deprecated, and this redirection is now deprecated as well. Please do this redirection yourself like ## reshape2::dcast(dat). In the next version, this warning will become an error. data.wide &lt;- data.wide[which(data.wide$genome == &quot;KB1&quot;), ] rownames(data.wide) &lt;- paste0(data.wide$POS, &quot; (&quot;, data.wide$REF, &quot; -&gt; &quot;, data.wide$ALT, &quot;) &quot;, data.wide$feature) heat &lt;- data.matrix(data.wide[, 6:9]) heat &lt;- heat[which(rowSums(!is.na(heat)) &gt; 2), ] # filter uncommon library(circlize) library(ComplexHeatmap) heat[is.na(heat)] &lt;- 0 col_fun = colorRamp2(c(0, 0.5, 1), c(&quot;white&quot;, &quot;yellow&quot;, &quot;red&quot;)) Heatmap(heat, name = &quot;AF&quot;, col = col_fun, column_names_gp = gpar(fontsize = 9), row_names_gp = gpar(fontsize = 9), show_row_dend = F, show_row_names = T, show_column_dend = F) 3.7.6 YL58 dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) # dat &lt;- dat[which(dat$mouse.group == &#39;Water&#39; | dat$mouse.group == &#39;Tetracyclin&#39; ),] data.wide &lt;- dcast(dat, genome + POS + REF + ALT + feature ~ mouse.group, value.var = &quot;AF&quot;) ## Warning in dcast(dat, genome + POS + REF + ALT + feature ~ mouse.group, : The dcast generic in data.table has been passed a data.frame and will attempt to redirect to the reshape2::dcast; please note that reshape2 is deprecated, and this redirection is now deprecated as well. Please do this redirection yourself like ## reshape2::dcast(dat). In the next version, this warning will become an error. data.wide &lt;- data.wide[which(data.wide$genome == &quot;YL58&quot;), ] rownames(data.wide) &lt;- paste0(data.wide$POS, &quot; (&quot;, data.wide$REF, &quot; -&gt; &quot;, data.wide$ALT, &quot;) &quot;, data.wide$feature) heat &lt;- data.matrix(data.wide[, 6:9]) heat &lt;- heat[which(rowSums(!is.na(heat)) &gt; 2), ] # filter uncommon library(circlize) library(ComplexHeatmap) heat[is.na(heat)] &lt;- 0 col_fun = colorRamp2(c(0, 0.5, 1), c(&quot;white&quot;, &quot;yellow&quot;, &quot;red&quot;)) Heatmap(heat, name = &quot;AF&quot;, col = col_fun, column_names_gp = gpar(fontsize = 9), row_names_gp = gpar(fontsize = 9), show_row_dend = F, show_row_names = T, show_column_dend = F) 3.7.7 I46 dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) # dat &lt;- dat[which(dat$mouse.group == &#39;Water&#39; | dat$mouse.group == &#39;Tetracyclin&#39; ),] data.wide &lt;- dcast(dat, genome + POS + REF + ALT + feature ~ mouse.group, value.var = &quot;AF&quot;) ## Warning in dcast(dat, genome + POS + REF + ALT + feature ~ mouse.group, : The dcast generic in data.table has been passed a data.frame and will attempt to redirect to the reshape2::dcast; please note that reshape2 is deprecated, and this redirection is now deprecated as well. Please do this redirection yourself like ## reshape2::dcast(dat). In the next version, this warning will become an error. data.wide &lt;- data.wide[which(data.wide$genome == &quot;I46&quot;), ] rownames(data.wide) &lt;- paste0(data.wide$POS, &quot; (&quot;, data.wide$REF, &quot; -&gt; &quot;, data.wide$ALT, &quot;) &quot;, data.wide$feature) heat &lt;- data.matrix(data.wide[, 6:9]) heat &lt;- heat[which(rowSums(!is.na(heat)) &gt; 2), ] # filter uncommon library(circlize) library(ComplexHeatmap) heat[is.na(heat)] &lt;- 0 col_fun = colorRamp2(c(0, 0.5, 1), c(&quot;white&quot;, &quot;yellow&quot;, &quot;red&quot;)) Heatmap(heat, name = &quot;AF&quot;, col = col_fun, column_names_gp = gpar(fontsize = 9), row_names_gp = gpar(fontsize = 9), show_row_dend = F, show_row_names = T, show_column_dend = F) 3.7.8 Filter: not in water but in AB 3.7.9 KB1 dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) # dat &lt;- dat[which(dat$mouse.group == &#39;Water&#39; | dat$mouse.group == &#39;Tetracyclin&#39; ),] data.wide &lt;- dcast(dat, genome + POS + REF + ALT + feature ~ mouse.group, value.var = &quot;AF&quot;) ## Warning in dcast(dat, genome + POS + REF + ALT + feature ~ mouse.group, : The dcast generic in data.table has been passed a data.frame and will attempt to redirect to the reshape2::dcast; please note that reshape2 is deprecated, and this redirection is now deprecated as well. Please do this redirection yourself like ## reshape2::dcast(dat). In the next version, this warning will become an error. data.wide &lt;- data.wide[which(data.wide$genome == &quot;KB1&quot;), ] rownames(data.wide) &lt;- paste0(data.wide$POS, &quot; (&quot;, data.wide$REF, &quot; -&gt; &quot;, data.wide$ALT, &quot;) &quot;, data.wide$feature) heat &lt;- data.wide[, 6:9] heat[is.na(heat)] &lt;- 0 heat &lt;- heat[which(heat$Water &lt; 0.5 &amp; (heat$Ciprofloxacin &gt; 0.5 | heat$Tetracyclin &gt; 0.5 | heat$Vancomycin &gt; 0.5)), ] # filter water heat &lt;- data.matrix(heat) library(circlize) library(ComplexHeatmap) heat[is.na(heat)] &lt;- 0 col_fun = colorRamp2(c(0, 0.5, 1), c(&quot;white&quot;, &quot;yellow&quot;, &quot;red&quot;)) Heatmap(heat, name = &quot;AF&quot;, col = col_fun, column_names_gp = gpar(fontsize = 9), row_names_gp = gpar(fontsize = 9), show_row_dend = F, show_row_names = T, show_column_dend = F) 3.7.10 YL58 dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) # dat &lt;- dat[which(dat$mouse.group == &#39;Water&#39; | dat$mouse.group == &#39;Tetracyclin&#39; ),] data.wide &lt;- dcast(dat, genome + POS + REF + ALT + feature ~ mouse.group, value.var = &quot;AF&quot;) ## Warning in dcast(dat, genome + POS + REF + ALT + feature ~ mouse.group, : The dcast generic in data.table has been passed a data.frame and will attempt to redirect to the reshape2::dcast; please note that reshape2 is deprecated, and this redirection is now deprecated as well. Please do this redirection yourself like ## reshape2::dcast(dat). In the next version, this warning will become an error. data.wide &lt;- data.wide[which(data.wide$genome == &quot;YL58&quot;), ] rownames(data.wide) &lt;- paste0(data.wide$POS, &quot; (&quot;, data.wide$REF, &quot; -&gt; &quot;, data.wide$ALT, &quot;) &quot;, data.wide$feature) heat &lt;- data.wide[, 6:9] heat[is.na(heat)] &lt;- 0 heat &lt;- heat[which(heat$Water &lt; 0.5 &amp; (heat$Ciprofloxacin &gt; 0.5 | heat$Tetracyclin &gt; 0.5 | heat$Vancomycin &gt; 0.5)), ] # filter water heat &lt;- data.matrix(heat) library(circlize) library(ComplexHeatmap) heat[is.na(heat)] &lt;- 0 col_fun = colorRamp2(c(0, 0.5, 1), c(&quot;white&quot;, &quot;yellow&quot;, &quot;red&quot;)) Heatmap(heat, name = &quot;AF&quot;, col = col_fun, column_names_gp = gpar(fontsize = 9), row_names_gp = gpar(fontsize = 9), show_row_dend = F, show_row_names = T, show_column_dend = F) 3.7.11 I46 dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) # dat &lt;- dat[which(dat$mouse.group == &#39;Water&#39; | dat$mouse.group == &#39;Tetracyclin&#39; ),] data.wide &lt;- dcast(dat, genome + POS + REF + ALT + feature ~ mouse.group, value.var = &quot;AF&quot;) ## Warning in dcast(dat, genome + POS + REF + ALT + feature ~ mouse.group, : The dcast generic in data.table has been passed a data.frame and will attempt to redirect to the reshape2::dcast; please note that reshape2 is deprecated, and this redirection is now deprecated as well. Please do this redirection yourself like ## reshape2::dcast(dat). In the next version, this warning will become an error. data.wide &lt;- data.wide[which(data.wide$genome == &quot;I46&quot;), ] rownames(data.wide) &lt;- paste0(data.wide$POS, &quot; (&quot;, data.wide$REF, &quot; -&gt; &quot;, data.wide$ALT, &quot;) &quot;, data.wide$feature) heat &lt;- data.wide[, 6:9] heat[is.na(heat)] &lt;- 0 heat &lt;- heat[which(heat$Water &lt; 0.5 &amp; (heat$Ciprofloxacin &gt; 0.5 | heat$Tetracyclin &gt; 0.5 | heat$Vancomycin &gt; 0.5)), ] # filter water heat &lt;- data.matrix(heat) library(circlize) library(ComplexHeatmap) heat[is.na(heat)] &lt;- 0 col_fun = colorRamp2(c(0, 0.5, 1), c(&quot;white&quot;, &quot;yellow&quot;, &quot;red&quot;)) Heatmap(heat, name = &quot;AF&quot;, col = col_fun, column_names_gp = gpar(fontsize = 9), row_names_gp = gpar(fontsize = 9), show_row_dend = F, show_row_names = T, show_column_dend = F) 3.8 visualize coverage dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) p &lt;- ggplot(dat, aes(x = DP, y = AF, color = genome_hr)) p &lt;- p + geom_point(size = 1) + theme_classic() p Log10 version dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) p &lt;- ggplot(dat, aes(x = DP, y = AF, color = genome_hr)) p &lt;- p + geom_point(size = 1) + theme_classic() + scale_y_log10() + scale_y_log10() ## Scale for &#39;y&#39; is already present. Adding another scale for &#39;y&#39;, which will replace the existing scale. p "],
["ab-samples.html", "Section 4 AB Samples 4.1 Load in variants 4.2 AF frequency 4.3 number of variants per samples", " Section 4 AB Samples 4.1 Load in variants vcfToDataframe &lt;- function(vcf.files, contig_mapping = contig_mapping, gff.df = gff.df) { require(vcfR) res &lt;- list() for (file in vcf.files) { library(data.table) vcf.content &lt;- vcfR::read.vcfR(file, verbose = FALSE) vcf.fix &lt;- as.data.frame(vcf.content@fix) # contains chr, position and substitution informations vcf.info &lt;- vcfR::INFO2df(vcf.content) # get INFO field, contains DP, AF informations if (nrow(vcf.fix) &gt; 0) { # there are variants dat &lt;- as.data.frame(cbind(vcf.fix[, c(1, 2, 4, 5, 6)], vcf.info[, c(1, 2)])) dat$majorAF &lt;- sapply(dat$AF, minorAfToMajorAf) # transforms e.g. AF of 0.1 to 0.9, 0.9 stays 0.9 and 0.5 stays 0.5 dat$genome &lt;- contig_mapping[match(dat$CHROM, contig_mapping$contig), ]$genome # map chr information to genome name e.g. NHMU01000001.1 -&gt; i48 dat$genome_hr &lt;- translateGenomeIdToFullName(tolower(dat$genome)) dat$mouse.id &lt;- substr(tools::file_path_sans_ext(basename(file)), 1, 4) dat$mouse.group &lt;- translateMouseIdToTreatmentGroup(dat$mouse.id) dat$day &lt;- as.integer(substr(basename(file), 6, 7)) dat$phase &lt;- binDaysByPhase(as.numeric(as.matrix(dat$day))) dat$phase_num &lt;- binDaysByPhaseGroup(dat$day) dat$dp &lt;- as.numeric(as.matrix(vcf.info$DP)) # annotate overlay of gene dt.gff &lt;- data.table(start = gff.df$start, end = gff.df$end, chr = as.character(as.matrix(gff.df$chr)), feature = gff.df$product) colnames(dat)[1:2] &lt;- c(&quot;chr&quot;, &quot;start&quot;) dat$start &lt;- as.integer(as.matrix(dat$start)) dat$chr &lt;- as.character(as.matrix(dat$chr)) dat$end &lt;- dat$start dat2 &lt;- as.data.table(dat) setkey(dt.gff, chr, start, end) annotated &lt;- foverlaps(dat2, dt.gff, type = &quot;within&quot;, mult = &quot;first&quot;) res[[tools::file_path_sans_ext(basename(file))]] &lt;- annotated # add vcf df to list } else { message(&quot;Skipping&quot;) } } df &lt;- as.data.frame(do.call(rbind, res)) # merge list to df return(df) } # load in reference information gff.files &lt;- Sys.glob(&quot;data/references/joined_reference_curated_ecoli/*.gff&quot;) gff.df &lt;- NULL for (gff.file in gff.files) { message(gff.file) gff &lt;- rtracklayer::readGFF(gff.file) # subset since different columns are present on gff files relevant &lt;- data.frame(start = gff$start, end = gff$end, type = as.character(as.matrix(gff$type)), gene = as.character(as.matrix(gff$gene)), product = as.character(as.matrix(gff$product)), chr = as.character(as.matrix(gff$seqid))) relevant$genome &lt;- substr(basename(gff.file), 1, nchar(basename(gff.file)) - 4) gff.df &lt;- rbind(gff.df, relevant) } ## data/references/joined_reference_curated_ecoli/joined_reference_curated_ecoli.gff # load in contig information contig_mapping &lt;- read.csv2(&quot;data/contig_mapping_new_ref.csv&quot;, sep = &quot;;&quot;, header = T, stringsAsFactors = F) # this file contains contig names of the 12 OligoMM genomes # load in vcf files vcf.files &lt;- Sys.glob(&quot;out_philipp/all_vcf/*.vcf&quot;) vcf.samples &lt;- suppressWarnings(vcfToDataframe(vcf.files, contig_mapping, gff.df = gff.df)) ## Skipping vcf.samples$feature &lt;- as.character(as.matrix(vcf.samples$feature)) vcf.samples[which(is.na(vcf.samples$feature)), ]$feature &lt;- &quot;outside ORFs&quot; vcf.samples$start &lt;- NULL vcf.samples$end &lt;- NULL vcf.samples$i.end &lt;- NULL colnames(vcf.samples)[3] &lt;- &quot;POS&quot; saveRDS(vcf.samples, file = &quot;data/rds/omm_ab.rds&quot;) 4.2 AF frequency p &lt;- ggplot(vcf.samples, aes(AF, fill = genome)) + geom_histogram() p &lt;- p + facet_grid(mouse.id + mouse.group ~ genome + genome_hr) p &lt;- p + theme_classic() + xlab(&quot;AF&quot;) + ylab(&quot;occurence&quot;) print(p) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Figure 4.1: AF of resequenced strains p &lt;- ggplot(vcf.samples, aes(majorAF, fill = genome)) + geom_histogram() p &lt;- p + facet_grid(mouse.id + mouse.group ~ genome + genome_hr) p &lt;- p + theme_classic() + xlab(&quot;AF&quot;) + ylab(&quot;occurence&quot;) print(p) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Figure 4.2: major AF of resequenced strains 4.3 number of variants per samples dat &lt;- readRDS(&quot;data/rds/omm_ab.rds&quot;) dat$dummy &lt;- 1 dat.agg &lt;- aggregate(dummy ~ mouse.id + mouse.group + day + phase, dat, sum) DT::datatable(dat.agg) 4.3.1 number of variants per treatment group p &lt;- ggplot(dat.agg, aes(x = mouse.id, y = dummy, color = day)) p &lt;- p + geom_jitter(shape = 4) + facet_grid(. ~ mouse.group, scales = &quot;free_x&quot;) p &lt;- p + geom_boxplot() + theme_classic() + xlab(&quot;Mouse ID&quot;) + ylab(&quot;number of variants&quot;) plotly::ggplotly(p) Figure 4.3: number of variants of all 12 OMM genomes by mouse dat &lt;- readRDS(&quot;data/rds/omm_ab.rds&quot;) dat$sample.id &lt;- paste0(dat$mouse.id, &quot;-&quot;, dat$day) dat$variant.id &lt;- paste0(dat$POS, &quot;-&quot;, dat$REF, &quot;-&quot;, dat$ALT) data.wide &lt;- dcast(dat, variant.id ~ sample.id, value.var = &quot;AF&quot;) ## Warning in dcast(dat, variant.id ~ sample.id, value.var = &quot;AF&quot;): The dcast generic in data.table has been passed a data.frame and will attempt to redirect to the reshape2::dcast; please note that reshape2 is deprecated, and this redirection is now deprecated as well. Please do this redirection yourself like ## reshape2::dcast(dat). In the next version, this warning will become an error. data.wide[is.na(data.wide)] &lt;- 0 rownames(data.wide) &lt;- data.wide$variant.id data.wide$variant.id &lt;- NULL library(circlize) library(ComplexHeatmap) heat &lt;- data.matrix(data.wide) # limit to variants that are present in at least 10% of samples heat_num &lt;- rowSums(heat != 0) heat2 &lt;- heat[which(heat_num &gt; ncol(heat)/10), ] # limit to variants that have a high variance heat_var_num &lt;- matrixStats::rowVars(heat2) heat3 &lt;- heat2[which(heat_var_num &gt; quantile(heat_var_num, 0.5)), ] dat$dummy &lt;- 1 annot.data &lt;- aggregate(dummy ~ mouse.id + mouse.group + day + phase, dat, sum) annot.data$sample.id &lt;- paste0(annot.data$mouse.id, &quot;-&quot;, annot.data$day) heat3.day &lt;- annot.data[match(colnames(heat3), annot.data$sample.id), ]$day heat3.mouse.group &lt;- annot.data[match(colnames(heat3), annot.data$sample.id), ]$mouse.group heat3.phase &lt;- annot.data[match(colnames(heat3), annot.data$sample.id), ]$phase data.wide.sub &lt;- dat[match(colnames(heat3), dat$sample.id), ] col_fun = colorRamp2(c(0, 0.5, 1), c(&quot;white&quot;, &quot;yellow&quot;, &quot;red&quot;)) # order the heatmap by treatment group pdf(&quot;heat.pdf&quot;, width = 10, height = 10) Heatmap(heat3, name = &quot;AF&quot;, col = col_fun, border = TRUE, top_annotation = HeatmapAnnotation(num = anno_lines(colSums(heat3), smooth = TRUE, border = TRUE), day = heat3.day), cluster_columns = F, right_annotation = rowAnnotation(prev = anno_barplot(rowSums(heat3))), row_gap = unit(0, &quot;mm&quot;), column_gap = unit(0, &quot;mm&quot;), column_split = heat3.mouse.group, column_names_gp = gpar(fontsize = 5), row_names_gp = gpar(fontsize = 3), show_row_dend = F, show_row_names = F, show_column_dend = F) dev.off() ## quartz_off_screen ## 2 ## focus on 99 percentile in variance dat &lt;- readRDS(&quot;data/rds/omm_ab.rds&quot;) dat$rep.group &lt;- translateMouseIdToReplicateGroup(dat$mouse.id) dat &lt;- dat[which(dat$rep.group == &quot;Full&quot;), ] dat$sample.id &lt;- paste0(dat$mouse.id, &quot;-&quot;, dat$day) dat$variant.id &lt;- paste0(dat$POS, &quot;-&quot;, dat$REF, &quot;-&quot;, dat$ALT) data.wide &lt;- dcast(dat, variant.id ~ sample.id, value.var = &quot;AF&quot;) ## Warning in dcast(dat, variant.id ~ sample.id, value.var = &quot;AF&quot;): The dcast generic in data.table has been passed a data.frame and will attempt to redirect to the reshape2::dcast; please note that reshape2 is deprecated, and this redirection is now deprecated as well. Please do this redirection yourself like ## reshape2::dcast(dat). In the next version, this warning will become an error. data.wide[is.na(data.wide)] &lt;- 0 rownames(data.wide) &lt;- data.wide$variant.id data.wide$variant.id &lt;- NULL heat &lt;- data.matrix(data.wide) # limit to variants that are present in at least 10% of samples heat_num &lt;- rowSums(heat != 0) heat2 &lt;- heat[which(heat_num &gt; ncol(heat)/10), ] # limit to variants that have a high variance heat_var_num &lt;- matrixStats::rowVars(heat2) heat3 &lt;- heat2[which(heat_var_num &gt; quantile(heat_var_num, 0.5)), ] dat$dummy &lt;- 1 annot.data &lt;- aggregate(dummy ~ mouse.id + mouse.group + day + phase, dat, sum) annot.data$sample.id &lt;- paste0(annot.data$mouse.id, &quot;-&quot;, annot.data$day) heat3.mouse.id &lt;- annot.data[match(colnames(heat3), annot.data$sample.id), ]$mouse.id heat3.day &lt;- annot.data[match(colnames(heat3), annot.data$sample.id), ]$day heat3.mouse.group &lt;- annot.data[match(colnames(heat3), annot.data$sample.id), ]$mouse.group heat3.phase &lt;- annot.data[match(colnames(heat3), annot.data$sample.id), ]$phase heat3.phase2 &lt;- ifelse(heat3.phase == &quot;post-treatment&quot;, 6, NA) col_fun = colorRamp2(c(0, 0.5, 1), c(&quot;white&quot;, &quot;yellow&quot;, &quot;red&quot;)) # order the heatmap by treatment group pdf(&quot;heat3.pdf&quot;, width = 20, height = 25) Heatmap(heat3, name = &quot;AF&quot;, col = col_fun, border = TRUE, top_annotation = HeatmapAnnotation(num = anno_lines(colSums(heat3), smooth = TRUE, border = TRUE), day = anno_simple(heat3.day, pch = heat3.phase2)), cluster_columns = F, column_split = heat3.mouse.group, column_names_gp = gpar(fontsize = 18), row_names_gp = gpar(fontsize = 8), show_row_dend = F, show_row_names = F, show_column_dend = F) dev.off() ## quartz_off_screen ## 2 ## one mouse x &lt;- readRDS(&quot;data/rds/omm_ab.rds&quot;) pdf(file = &quot;muller.pdf&quot;) for (genome in unique(x$chr)) { dat &lt;- readRDS(&quot;data/rds/omm_ab.rds&quot;) message(genome) dat$variant.id &lt;- paste0(dat$POS, &quot;-&quot;, dat$REF, &quot;-&quot;, dat$ALT) dat &lt;- dat[which(dat$chr == genome), ] data.wide &lt;- dcast(dat, day + mouse.id + mouse.group ~ variant.id, value.var = &quot;AF&quot;) data.wide[is.na(data.wide)] &lt;- 0 colMax &lt;- function(X) apply(X, 2, max) dat_mat &lt;- data.wide[, -c(1:3)] # filter variants data.wide.reduced &lt;- cbind(data.wide[, c(1:3)], dat_mat[, which(colMax(dat_mat) &gt; 0.5)]) # data.wide.reduced &lt;- data.wide if (ncol(data.wide.reduced) &gt; 3) { dat2 &lt;- melt(data.wide.reduced, id.vars = c(&quot;day&quot;, &quot;mouse.id&quot;, &quot;mouse.group&quot;)) dat3 &lt;- dat2 %&gt;% group_by(day, mouse.id) %&gt;% mutate(Nor = value/sum(value)) set.seed(123) col_list &lt;- sort(unique(dat3$variable)) cols &lt;- randomcoloR::randomColor(length(unique(dat3$variable))) # Muller plot p &lt;- ggplot(dat3, aes(x = day, y = Nor, group = variable, fill = variable)) p &lt;- p + geom_area(color = &quot;black&quot;, size = 0.1) p &lt;- p + facet_wrap(~mouse.group + mouse.id, ncol = 3) p &lt;- p + theme_minimal() + theme(legend.position = &quot;none&quot;) p &lt;- p + ylab(&quot;Fraction&quot;) p &lt;- p + scale_fill_manual(values = cols, breaks = col_list) p &lt;- p + ggtitle(genome) print(p) } } dev.off() ### x &lt;- readRDS(&quot;data/rds/omm_ab.rds&quot;) pdf(file = &quot;line.pdf&quot;) for (genome in unique(x$chr)) { dat &lt;- readRDS(&quot;data/rds/omm_ab.rds&quot;) message(genome) dat$variant.id &lt;- paste0(dat$POS, &quot;-&quot;, dat$REF, &quot;-&quot;, dat$ALT) dat &lt;- dat[which(dat$chr == genome), ] data.wide &lt;- dcast(dat, day + mouse.id + mouse.group ~ variant.id, value.var = &quot;AF&quot;) data.wide[is.na(data.wide)] &lt;- 0 dat2 &lt;- melt(data.wide, id.vars = c(&quot;day&quot;, &quot;mouse.id&quot;, &quot;mouse.group&quot;)) set.seed(123) col_list &lt;- sort(unique(dat3$variable)) cols &lt;- randomcoloR::randomColor(length(unique(dat3$variable))) p &lt;- ggplot(dat2, aes(x = day, y = value)) p &lt;- p + geom_line(aes(group = variable), alpha = 0.2) p &lt;- p + theme_classic() + facet_wrap(~mouse.group + mouse.id, ncol = 3) plotly::ggplotly(p) } dev.off() "]
]
