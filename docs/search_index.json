[
["Variant-statistics-filtered.html", "Section 4 Variant statistics relative to I_mi 4.1 Number of variants 4.2 ORFs with variants", " Section 4 Variant statistics relative to I_mi dat &lt;- readRDS(&quot;data/rds/variants.rds&quot;) dat &lt;- dat[which(dat$ecoli== FALSE),] dat$variant.id &lt;- paste0(dat$CHROM, dat$POS, dat$REF, dat$ALT) variants.to.remove &lt;- dat[which(dat$mouse.id == &quot;I_mi&quot;),]$variant.id dat.relative &lt;- dat[ ! dat$variant.id %in% variants.to.remove, ] dat.removed &lt;- dat[dat$variant.id %in% variants.to.remove, ] dat.relative$variant.id &lt;- NULL saveRDS(dat.relative, file = &quot;data/rds/variants-relative.rds&quot;) From 243 total variants in all samples, we removed 110 variants that are present in I_mi, which results to a set of 0 unique variants. The excluded variants are: DT::datatable(dat.removed) 4.1 Number of variants 4.1.1 by sample only non-ecoli samples without variants that are present in I_mi dat &lt;- readRDS(&quot;data/rds/variants-relative.rds&quot;) dat &lt;- dat[which(dat$ecoli == FALSE),] This set contains 284 variants found in 8 genomes. The detailed breakdow of variants per genome is as follows. dat$dummy &lt;- 1 dat.by.sample.genome &lt;- aggregate(dummy ~ mouse.id + genome, dat, sum) colnames(dat.by.sample.genome) &lt;- c(&quot;sample&quot;, &quot;genome&quot;, &quot;number_variants&quot;) DT::datatable(dat.by.sample.genome) p &lt;- ggplot(dat.by.sample.genome, aes(x = reorder(sample, number_variants), y = number_variants, fill = genome)) p &lt;- p + geom_bar(stat=&quot;identity&quot;) + coord_flip() + theme_classic() p &lt;- p + ylab(&quot;number of variants&quot;) + xlab(&quot;sample&quot;) + scale_fill_manual(values = omm_colors) plotly::ggplotly(p) Figure 4.1: Number of variants by genome (color) found in samples 4.1.2 by extendet metadata only non-ecoli samples without variants that are present in I_mi dat$dummy &lt;- 1 dat.by.sample.genome2 &lt;- aggregate(dummy ~ mouse.id + genome + generation + ecoli + desc + day, dat, sum) colnames(dat.by.sample.genome2) &lt;- c(&quot;sample&quot;, &quot;genome&quot;, &quot;generation&quot;, &quot;ecoli&quot;, &quot;desc&quot;,&quot;day&quot;,&quot;number_variants&quot;) DT::datatable(dat.by.sample.genome2) dat$DP &lt;- NULL #dat.by.sample.genome2 &lt;- dat.by.sample.genome2[which(dat.by.sample.genome2$sample != &quot;I_cc&quot; &amp; dat.by.sample.genome2$sample != &quot;I_mi&quot;),] p &lt;- ggplot(dat.by.sample.genome2, aes(x = sample, y = number_variants, fill = genome)) p &lt;- p + geom_bar(stat=&quot;identity&quot;) + theme_classic() p &lt;- p + facet_grid(.~ generation + day, scales = &quot;free_x&quot;) p &lt;- p + ylab(&quot;number of variants&quot;) + xlab(&quot;sample&quot;) + scale_fill_manual(values = omm_colors) p &lt;- p + theme(panel.border=element_blank(), strip.text=element_text(size=12, colour=&quot;black&quot;), strip.background=element_rect(colour=&quot;white&quot;, fill=&quot;white&quot;)) print(p) # plotly is not working on this type of plot Figure 4.2: Number of variants by genome (color) found in samples 4.2 ORFs with variants In this section we visualze the occurence of ORFs and their annotations of overlaying variants. The full table is available in this github repository under data/tables/table1_relative_to_imi.tsv. 4.2.1 Data 4.2.1.1 Write to table write.table(dat, file = &quot;data/tables/table1_relative_to_imi.tsv&quot;, sep = &quot;\\t&quot;, row.names = F, quote = F) 4.2.1.2 Aggregate by mouse The total number of variant overlapts to ORF per mouse, ordered by their occurence is below and can in data/tables/table2.tsv dat.all &lt;- aggregate(dummy ~ genome + orf_desc , dat, sum) colnames(dat.all) &lt;- c(&quot;genome&quot;, &quot;orf_annotation&quot;, &quot;occurence&quot;) write.table(dat.all, file = &quot;data/tables/table2.tsv&quot;, sep = &quot;\\t&quot;, row.names = F, quote = F) dat.all &lt;- dat.all[order(dat.all$occurence, decreasing = TRUE),] DT::datatable(dat.all) 4.2.2 Statistics In total, we identified 284 variants in all 9 samples. Of them, 284 variants map to 59 ORFs with an annotated function 4.2.3 Minor to major transistion 4.2.3.1 Plotting function pairedAFplot &lt;- function(dat = dat, case = &quot;1607&quot;, control = &quot;1885&quot;){ require(reshape2) require(ggplot2) dat.pair &lt;- dat[which(dat$mouse.id == case | dat$mouse.id == control),] #dat.pair &lt;- dat.pair[which(!is.na(dat.pair$orf_desc)),] data.wide &lt;- dcast(dat.pair, genome + POS + REF + ALT + orf_desc + vartype ~ mouse.id, value.var = &quot;AF&quot;) colnames(data.wide)[7] &lt;- &quot;sample_1&quot; colnames(data.wide)[8] &lt;- &quot;sample_2&quot; data.wide[is.na(data.wide)] &lt;- 0 p &lt;- ggplot(data.wide, aes(x = sample_1, y =sample_2, color = genome, label = orf_desc, shape = vartype)) p &lt;- p + geom_point(fill = NA) + theme_classic() + scale_color_manual(values = omm_colors) p &lt;- p + geom_hline(yintercept = .5, linetype = 2, color = &quot;grey50&quot;) p &lt;- p + geom_vline(xintercept = .5, linetype = 2, color = &quot;grey50&quot;) p &lt;- p + theme(aspect.ratio = 1) p &lt;- p + scale_shape_manual(values = variant_shapes) p &lt;- p + theme(strip.background = element_blank()) p &lt;- p + geom_abline(intercept = 0, slope = 1) p &lt;- p + xlab(paste0(&quot;sample &quot;, case)) + ylab(paste0(&quot;sample &quot;, control)) p &lt;- p + theme(panel.border = element_rect(colour = &quot;black&quot;, fill=NA, size=1)) return(p) } 4.2.3.2 between generation comparison 4.2.3.2.1 comparison of t=20 of first/second generation suppressWarnings(ggplotly(pairedAFplot(dat, case = &quot;1607&quot;, control = &quot;1885&quot;))) Figure 4.3: Scatter plot of AF of two samples. Only variants with functional annotation are shown 4.2.3.2.2 comparison of t=40 of first/second generation (sample 1660) suppressWarnings(ggplotly(pairedAFplot(dat, case = &quot;1660&quot;, control = &quot;1807&quot;))) Figure 4.4: Scatter plot of AF of two samples. Only variants with functional annotation are shown 4.2.3.2.3 comparison of t=40 of first/second generation (sample 1750) suppressWarnings(ggplotly(pairedAFplot(dat, case = &quot;1750&quot;, control = &quot;1807&quot;))) Figure 4.5: Scatter plot of AF of two samples. Only variants with functional annotation are shown 4.2.3.2.4 comparison of t=80 of first/second generation suppressWarnings(ggplotly(pairedAFplot(dat, case = &quot;1779&quot;, control = &quot;1789&quot;))) Figure 4.6: Scatter plot of AF of two samples. Only variants with functional annotation are shown 4.2.3.2.5 comparison of t=80 of first/second generation suppressWarnings(ggplotly(pairedAFplot(dat, case = &quot;1779&quot;, control = &quot;1789&quot;))) Figure 4.7: Scatter plot of AF of two samples. Only variants with functional annotation are shown 4.2.3.3 within generation comparison of gen=1 4.2.3.3.1 t=20 vs t=40 suppressWarnings(ggplotly(pairedAFplot(dat, case = &quot;1607&quot;, control = &quot;1660&quot;))) Figure 4.8: Scatter plot of AF of two samples. Only variants with functional annotation are shown 4.2.3.3.2 t=40 vs t=80 suppressWarnings(ggplotly(pairedAFplot(dat, case = &quot;1660&quot;, control = &quot;1779&quot;))) Figure 4.9: Scatter plot of AF of two samples. Only variants with functional annotation are shown 4.2.3.4 within generation comparison of gen=2 4.2.3.4.1 t=20 vs t=40 suppressWarnings(ggplotly(pairedAFplot(dat, case = &quot;1885&quot;, control = &quot;1807&quot;))) Figure 4.10: Scatter plot of AF of two samples. Only variants with functional annotation are shown 4.2.3.4.2 t=40 vs t=80 suppressWarnings(ggplotly(pairedAFplot(dat, case = &quot;1807&quot;, control = &quot;1789&quot;))) Figure 4.11: Scatter plot of AF of two samples. Only variants with functional annotation are shown 4.2.4 Gene-centric analysis 4.2.4.1 function geneCentricPlot &lt;- function(dat = dat, genome = &quot;yl44&quot;){ require(reshape2) require(ggplot2) dat.subset &lt;- dat[which(dat$genome == genome),] dat.subset$ID &lt;- paste0(dat.subset$POS, &quot;|&quot;, dat.subset$REF ,&quot;-&gt;&quot;, dat.subset$ALT) p &lt;- ggplot(dat.subset, aes(x = ID, y = AF, color = desc, shape = vartype)) p &lt;- p + geom_point(size = 4, fill = NA) p &lt;- p + coord_flip() + theme_classic() p &lt;- p + facet_grid(orf_desc ~., scales = &quot;free&quot;, space = &quot;free&quot;) p &lt;- p + ylim(c(0,1)) p &lt;- p + scale_shape_manual(values = variant_shapes) p &lt;- p + theme(strip.text.y = element_text(angle = 0), strip.placement = &quot;outside&quot;) p &lt;- p + xlab(&quot;&quot;) + ylab(&quot;allele frequency&quot;) + scale_color_manual(values = sample_colors) return(p) } # no grid version for html geneCentricPlot2 &lt;- function(dat = dat, genome = &quot;yl44&quot;){ require(reshape2) require(ggplot2) dat.subset &lt;- dat[which(dat$genome == genome),] dat.subset$ID &lt;- paste0(dat.subset$POS, &quot;|&quot;, dat.subset$REF ,&quot;-&gt;&quot;, dat.subset$ALT) p &lt;- ggplot(dat.subset, aes(x = orf_desc, y = AF, color = desc, shape = vartype)) p &lt;- p + geom_point(size = 4, fill = NA) p &lt;- p + coord_flip() + theme_classic() p &lt;- p + ylim(c(0,1)) p &lt;- p + scale_shape_manual(values = variant_shapes) p &lt;- p + theme(strip.background = element_blank()) + theme(strip.text.y = element_text(angle = 0), strip.placement = &quot;outside&quot;) p &lt;- p + xlab(&quot;&quot;) + ylab(&quot;allele frequency&quot;) + scale_color_manual(values = sample_colors) return(p) } 4.2.4.2 by ORF annotation (html) 4.2.4.2.1 yl44 suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;yl44&quot;))) Figure 4.12: AF by function of one genome 4.2.4.2.2 yl27 suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;yl27&quot;))) Figure 4.13: AF by function of one genome 4.2.4.2.3 yl58 suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;yl58&quot;))) Figure 4.14: AF by function of one genome 4.2.4.2.4 i48 suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;i48&quot;))) Figure 4.15: AF by function of one genome 4.2.4.2.5 yl32 suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;yl32&quot;))) Figure 4.16: AF by function of one genome 4.2.4.2.6 i46 #suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;i46&quot;))) 4.2.4.2.7 yl45 suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;yl45&quot;))) Figure 4.17: AF by function of one genome 4.2.4.2.8 yl31 suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;yl31&quot;))) Figure 4.18: AF by function of one genome 4.2.4.2.9 yl2 suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;yl2&quot;))) Figure 4.19: AF by function of one genome 4.2.4.2.10 i49 no variant? #$suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;i49&quot;))) 4.2.4.2.11 kb18 no variant #suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;kb18&quot;)) 4.2.4.2.12 kb1 no variant? #suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;kb1&quot;))) 4.2.5 by variant (static) similar to the plots above, but now the y axis is not the annotation but the variant ID (e.g. position|reference-&gt;alternative) 4.2.5.0.1 yl44 suppressWarnings(geneCentricPlot(dat, genome = &quot;yl44&quot;)) Figure 4.20: AF by function of one genome 4.2.5.0.2 yl27 suppressWarnings(geneCentricPlot(dat, genome = &quot;yl27&quot;)) Figure 4.21: AF by function of one genome 4.2.5.0.3 yl58 suppressWarnings(geneCentricPlot(dat, genome = &quot;yl58&quot;)) Figure 4.22: AF by function of one genome 4.2.5.0.4 i48 suppressWarnings(geneCentricPlot(dat, genome = &quot;i48&quot;)) Figure 4.23: AF by function of one genome 4.2.5.0.5 yl32 suppressWarnings(geneCentricPlot(dat, genome = &quot;yl32&quot;)) Figure 4.24: AF by function of one genome 4.2.5.0.6 i46 #suppressWarnings(geneCentricPlot(dat, genome = &quot;i46&quot;)) 4.2.5.0.7 yl45 suppressWarnings(geneCentricPlot(dat, genome = &quot;yl45&quot;)) Figure 4.25: AF by function of one genome 4.2.5.0.8 yl31 suppressWarnings(geneCentricPlot(dat, genome = &quot;yl31&quot;)) Figure 4.26: AF by function of one genome 4.2.5.0.9 yl2 suppressWarnings(geneCentricPlot(dat, genome = &quot;yl2&quot;)) Figure 4.27: AF by function of one genome 4.2.5.0.10 i49 #suppressWarnings(geneCentricPlot(dat, genome = &quot;i49&quot;)) 4.2.5.0.11 kb18 no variant #suppressWarnings(ggplotly(geneCentricPlot(dat, genome = &quot;kb18&quot;)) 4.2.5.0.12 kb1 #suppressWarnings(geneCentricPlot(dat, genome = &quot;kb1&quot;)) "]
]
