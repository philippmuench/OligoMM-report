[
["index.html", "Claudia’s data Preface How to generate this report Acknowledgements", " Claudia’s data Philipp C. Muench 2020-03-26 Preface Processing of NGS data is done using Snakemake and not covered by this report yet and will be added at a later stage. In short, preprocessing and analysis (such as bwa alignment and variant calling using Lofreq is defined using a Snakefile and a set of snakemake rules which are run on the HZI server (host) and detailed analysis (such as generation of figures and statistical tests) are done using R markdown on the client machine. How to generate this report In vscode with bookdown addon a server can be started using serve_book bookdown::serve_book(getwd()) This will starts a browser window pointing to http://127.0.0.1:7853 presenting the report written in R Markdown Acknowledgements Thanks goes to Baerbel Stecher Curtis Huttenhower Eric "],
["Setup.html", "Section 1 Setup 1.1 Dependencies 1.2 Workspace setup 1.3 Data structure", " Section 1 Setup 1.1 Dependencies Functions that are used frequent are defined in utils.R and are mostly helper functions for data manipulation (e.g. translation of sample ids to groups). Other packages can be load via cran using the install.packages() function. source(&quot;utils.R&quot;) library(&quot;vcfR&quot;) library(&quot;rmdformats&quot;) library(&quot;ggplot2&quot;) library(&quot;reshape2&quot;) library(&quot;ggridges&quot;) library(&quot;knitr&quot;) library(&quot;kableExtra&quot;) library(&quot;plotly&quot;) library(&quot;DT&quot;) 1.2 Workspace setup We specify the folder where the analysis is located. setwd(&quot;~/projects/oligomm-claudia/&quot;) 1.3 Data structure data/raw files from host machine, contains coverage and lofreq data data/annotation annotation files for OMM12 genomes e.g. phage location (pro-hunter, fasta files and Prokka annotation) data/rda processed raw data in rds format generated by 01-load-data.rmd "],
["Variant-statistics.html", "Section 2 Variant statistics 2.1 Process of raw data 2.2 Number of variants", " Section 2 Variant statistics 2.1 Process of raw data Since the raw output of the Snakemake pipeline produces one vcf file per sample (including all contigs of the OligoMM reference genomes) we now produce a single rds file that contains the merged variant information of the whole study. We define a function that iterates over a set of vcf files (vcf.files) #&#39; Processes a list of vcf files #&#39; #&#39; @param vcf.files a list of file path of files in vcf format #&#39; @param contig_mapping mapping file of vcf CHR to OMM reference genomes #&#39; @return a dataframe holding the merged annotated variant information vcfToDataframe &lt;- function(vcf.files, contig_mapping = read.csv2(&quot;data/contig_genome_mapping.csv&quot;, sep =&quot;;&quot;, header=T, stringsAsFactors = F) ) { require(vcfR) res &lt;- list() for (file in vcf.files) { vcf.content &lt;- vcfR::read.vcfR(file, verbose = FALSE ) vcf.fix &lt;- as.data.frame(vcf.content@fix) # contains chr, position and substitution informations vcf.info &lt;- vcfR::INFO2df(vcf.content) # get INFO field, contains DP, AF informations # vcf.ann &lt;- data.frame(do.call(&#39;rbind&#39;, strsplit(as.character(vcf.info$ANN),&#39;|&#39;,fixed = TRUE))) # split ANN field, contains information if files are processed by snpEff if(nrow(vcf.fix) &gt; 0) { dat &lt;- as.data.frame(cbind(vcf.fix[,c(1, 2, 4, 5, 6)], vcf.info[,c(1, 2)])) dat$majorAF &lt;- sapply(dat$AF, minorAfToMajorAf) # transforms e.g. AF of 0.1 to 0.9, 0.9 stays 0.9 and 0.5 stays 0.5 dat$genome &lt;- contig_mapping[match(dat$CHROM, contig_mapping$contig),]$genome # map chr information to genome name e.g. NHMU01000001.1 -&gt; i48 dat$genome_hr &lt;- translateGenomeIdToFullName(dat$genome) dat$day &lt;- as.integer(substr(basename(file), 6, 7)) # get day information from file name dat$mouse.id &lt;- substr(basename(file), 1, 4) # get mouse ID from file name, e.g. &quot;1681&quot; dat$phase &lt;- translateMouseIdToClaudiaGroup(as.character(as.matrix(dat$mouse.id))) dat$phase_num &lt;- binDaysByPhaseGroup(dat$day) dat$dp &lt;- as.numeric(as.matrix(vcf.info$DP)) res[[basename(file)]] &lt;- dat # add vcf df to list } } df &lt;- as.data.frame(do.call(rbind, res)) # merge list to df return(df) } We apply this function on all 24 files that live in data/raw/lofreq/*.vcf contig_mapping &lt;- read.csv2(&quot;data/contig_genome_mapping.csv&quot;, sep =&quot;;&quot;, header=T, stringsAsFactors = F) # this file contains contig names of the 12 OligoMM genomes vcf.files &lt;- Sys.glob(&quot;data/raw/lofreq/*.vcf&quot;) dat &lt;- suppressWarnings(vcfToDataframe(vcf.files, contig_mapping)) saveRDS(dat, file = &quot;data/rds/variants_unannotated.rds&quot;) The dataset is written to data/rds/variants_unannotated.rds) and will be used in later sections. 2.2 Number of variants dat &lt;- readRDS(&quot;data/rds/variants_unannotated.rds&quot;) This set contains 1796 variants found in 12 genomes. The detailed breakdow of variants per genome is: dat$dummy &lt;- 1 dat.by.sample.genome &lt;- aggregate(dummy ~ mouse.id + genome, dat, sum) colnames(dat.by.sample.genome) &lt;- c(&quot;sample&quot;, &quot;genome&quot;, &quot;number_variants&quot;) DT::datatable(dat.by.sample.genome) p &lt;- ggplot(dat.by.sample.genome, aes(x = reorder(sample, number_variants), y = number_variants, fill = genome)) p &lt;- p + geom_bar(stat=&quot;identity&quot;) + coord_flip() + theme_classic() p &lt;- p + ylab(&quot;number of variants&quot;) + xlab(&quot;sample&quot;) + scale_fill_manual(values = omm_colors) plotly::ggplotly(p) Figure 2.1: Number of variants by genome (color) found in samples by mouse and genome dat$dummy &lt;- 1 dat.by.sample &lt;- aggregate(dummy ~ mouse.id, dat, sum) colnames(dat.by.sample) &lt;- c(&quot;sample&quot;, &quot;number_variants&quot;) DT::datatable(dat.by.sample) p &lt;- ggplot(dat.by.sample, aes(x = reorder(sample, number_variants), y = number_variants)) p &lt;- p + geom_bar(stat=&quot;identity&quot;) + coord_flip() + theme_classic() p &lt;- p + xlab(&quot;number of variants&quot;) + ylab(&quot;sample&quot;) plotly::ggplotly(p) Figure 2.2: number of variants of all 12 OMM genomes by mouse "],
["Allele-frequency.html", "Section 3 Allele frequency 3.1 major allele frequency", " Section 3 Allele frequency 3.1 major allele frequency p &lt;- ggplot(dat, aes(x = majorAF, y = mouse.id)) p &lt;- p + ggridges::geom_density_ridges(jittered_points = TRUE, position = ggridges::position_points_jitter(width = 0.01, height = 0), point_shape = &#39;|&#39;, point_size = 1, point_alpha = 0.5, alpha = 0.1) p &lt;- p + theme_classic() #p &lt;- p + facet_grid(phase ~., space = &quot;free&quot;, scales= &quot;free&quot;) p &lt;- p + theme(strip.background = element_blank()) p &lt;- p + xlab(&quot;Major allele frequency&quot;) + ylab(&quot;Count&quot;) p ## Picking joint bandwidth of 0.0646 "]
]
