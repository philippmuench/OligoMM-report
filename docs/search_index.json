[
["index.html", "OMM report Preface How to generate this report Acknowledgements", " OMM report Philipp C. Muench 2020-05-29 Preface Processing of NGS data is done using Snakemake and not covered by this report yet and will be added at a later stage. In short, preprocessing and analysis (such as bwa alignment and variant calling using Lofreq is defined using a Snakefile and a set of snakemake rules which are run on the HZI server (host) and detailed analysis (such as generation of figures and statistical tests) are done using R markdown on the client machine. How to generate this report In vscode with bookdown addon a server can be started using serve_book setwd(&quot;~/Cloud/ActiveProjects/OligoMM-report&quot;) bookdown::serve_book(getwd()) This will starts a browser window pointing to http://127.0.0.1:7853 presenting the report written in R Markdown and will update as soon as there are changes on .Rmd files in the workspace. To end bookdown server type servr::daemon_stop(1) where 1 is the ID of the server running Acknowledgements "],
["Setup.html", "Section 1 Setup 1.1 Workspace setup 1.2 Dependencies 1.3 Data structure 1.4 Build this book", " Section 1 Setup Test 1.1 Workspace setup We specify the folder where the analysis is located. setwd(&quot;~/Cloud/ActiveProjects/OligoMM-report&quot;) 1.2 Dependencies Functions that are used frequent are defined in utils.R and are mostly helper functions for data manipulation (e.g. translation of sample ids to groups). Other packages can be load via cran using the install.packages() function. rm(list = ls()) source(&quot;utils.R&quot;) library(&quot;vcfR&quot;) library(&quot;rmdformats&quot;) library(&quot;ggplot2&quot;) library(&quot;reshape2&quot;) library(&quot;ggridges&quot;) library(&quot;knitr&quot;) library(&quot;kableExtra&quot;) library(&quot;plotly&quot;) library(&quot;DT&quot;) library(&quot;rtracklayer&quot;) library(&quot;bookdown&quot;) Note: for rtracklayer you might need curl sudo apt-get install libcurl4-openssl-dev 1.3 Data structure data/raw files from host machine, contains coverage, lofreq and varscan output data/annotation annotation files for OMM12 genomes e.g. phage location (pro-hunter, fasta files and Prokka annotation) data/tables tables in tsv format for e.g. import with Excel data/annotation/gff Prokka annotation data/rda processed raw data in rds format generated by 01-load-data.rmd docs html files generated via bookdown::serve_book(getwd()) 1.4 Build this book You need to install Pandoc. bookdown::serve_book(getwd()) and bookdown::render_book(getwd()) "],
["study-design.html", "Section 2 Study design 2.1 Experiment 2.2 Metadata 2.3 OligoMM", " Section 2 Study design 2.1 Experiment 2.2 Metadata design.df &lt;- read.table(&quot;data/sample_mapping.tsv&quot;, header = T, sep = &quot;\\t&quot;) DT::datatable(design.df) 2.3 OligoMM ID phylum species YL44 Verrucomicrobia A. muciniphila I48 Bacteroidetes B. caecimuris YL27 Bacteroidetes M. intestinale YL45 Proteobacteria T. muris YL2 Actinobacteria B. longum KB1 Firmicutes E. faecalis KB18 Firmicutes A. muris YL32 Firmicutes C. clostridioforme YL31 Firmicutes F. plautii YL58 Firmicutes B. coccoides I49 Firmicutes L. reuteri I46 Firmicutes C. innocuum 2.3.1 CRISPR based on Prokka [17:07:29] Searching for CRISPR repeats [17:07:30] CRISPR1 CP022722.1 1722776 with 6 spacers [17:07:30] CRISPR2 CP022722.1 3488656 with 4 spacers [17:07:30] CRISPR3 NHMT01000001.1 1999785 with 7 spacers [17:07:31] CRISPR4 NHMR02000002.1 214427 with 78 spacers [17:07:31] CRISPR5 NHMQ01000003.1 694333 with 9 spacers [17:07:31] CRISPR6 NHTR01000003.1 394380 with 20 spacers [17:07:31] CRISPR7 NHTR01000010.1 319 with 15 spacers [17:07:32] CRISPR8 CP021420.1 425056 with 20 spacers [17:07:32] CRISPR9 CP021420.1 434834 with 8 spacers [17:07:32] CRISPR10 NHMP01000001.1 344218 with 8 spacers [17:07:32] CRISPR11 NHMP01000001.1 403754 with 8 spacers [17:07:32] CRISPR12 NHMP01000007.1 29696 with 51 spacers [17:07:32] CRISPR13 NHMP01000007.1 50690 with 46 spacers [17:07:32] CRISPR14 CP022713.1 372223 with 14 spacers [17:07:32] CRISPR15 CP022713.1 3331136 with 7 spacers "],
["Variant-statistics.html", "Section 3 Variant statistics 3.1 Process of raw data 3.2 Quality of variants 3.3 Number of variants 3.4 ORFs with variants", " Section 3 Variant statistics 3.1 Process of raw data Since the raw output of the Snakemake pipeline produces one vcf file per sample (including all contigs of the OligoMM reference genomes) we now produce a single rds file that contains the merged variant information of the whole study. We define a function that iterates over a set of vcf files (vcf.files) #&#39; Processes a list of vcf files #&#39; #&#39; @param vcf.files a list of file path of files in vcf format #&#39; @param contig_mapping mapping file of vcf CHR to OMM reference genomes #&#39; @param gff.dff merged gff data from reference genomes #&#39; @return a dataframe holding the merged annotated variant information vcfToDataframe &lt;- function(vcf.files, contig_mapping = read.csv2(&quot;data/contig_genome_mapping.csv&quot;), gff.df = gff.df, varscan = F) { require(vcfR) res &lt;- list() for (file in vcf.files) { message(file) vcf.content &lt;- vcfR::read.vcfR(file, verbose = FALSE) vcf.fix &lt;- as.data.frame(vcf.content@fix) # contains chr, position and substitution informations vcf.info &lt;- vcfR::INFO2df(vcf.content) # get INFO field, contains DP, AF informations vcf.ann &lt;- data.frame(do.call(&quot;rbind&quot;, strsplit(as.character(vcf.info$ANN), &quot;|&quot;, fixed = TRUE))) # split ANN field, contains information if files are processed by snpEff if (nrow(vcf.fix) &gt; 0) { if (varscan) { dat &lt;- as.data.frame(cbind(vcf.fix[, c(1, 2, 4, 5, 6)], vcf.info[, c(1, 2, 3)])) # ther is a PV column only present in varscan files dat$pvalue &lt;- as.numeric(as.matrix(vcf.info$PV)) } else { dat &lt;- as.data.frame(cbind(vcf.fix[, c(1, 2, 4, 5, 6)], vcf.info[, c(1, 2)])) } dat$majorAF &lt;- sapply(dat$AF, minorAfToMajorAf) # transforms e.g. AF of 0.1 to 0.9, 0.9 stays 0.9 and 0.5 stays 0.5 dat$genome &lt;- contig_mapping[match(dat$CHROM, contig_mapping$contig), ]$genome # map chr information to genome name e.g. NHMU01000001.1 -&gt; i48 dat$genome_hr &lt;- translateGenomeIdToFullName(dat$genome) dat$mouse.id &lt;- substr(basename(file), 1, 4) # get mouse ID from file name, e.g. &#39;1681&#39; dat$dp &lt;- as.numeric(as.matrix(vcf.info$DP)) # print(summary(dat$AF)) print(summary(dat$DP)) dat$vartype &lt;- as.character(as.matrix(vcf.ann$X2)) dat$effect &lt;- as.character(as.matrix(vcf.ann$X3)) dat$substitution &lt;- as.character(as.matrix(vcf.ann$X11)) # annotate overlay of gene dat$orf_desc &lt;- as.character(as.matrix(apply(dat, 1, getGeneByPosition, gff = gff, pos.column = 2, chr.column = 1))) res[[basename(file)]] &lt;- dat # add vcf df to list } else { message(&quot;Skipping&quot;) } } df &lt;- as.data.frame(do.call(rbind, res)) # merge list to df return(df) } We apply this function on all 0 files that live in data/raw/lofreq/*.vcf # merge gff annotaions gff.files &lt;- Sys.glob(&quot;data/annotation/gff/*.gff&quot;) gff.df &lt;- NULL for (gff.file in gff.files) { message(gff.file) gff &lt;- rtracklayer::readGFF(gff.file) # subset since different columns are present on gff files relevant &lt;- data.frame(start = gff$start, end = gff$end, type = as.character(as.matrix(gff$type)), gene = as.character(as.matrix(gff$gene)), product = as.character(as.matrix(gff$product)), chr = as.character(as.matrix(gff$seqid))) relevant$genome &lt;- substr(basename(gff.file), 1, nchar(basename(gff.file)) - 4) gff.df &lt;- rbind(gff.df, relevant) } contig_mapping &lt;- read.csv2(&quot;data/contig_genome_mapping.csv&quot;, sep = &quot;;&quot;, header = T, stringsAsFactors = F) # this file contains contig names of the 12 OligoMM genomes # for lofreq results vcf.files &lt;- Sys.glob(&quot;data/raw/lofreq_eff/*.vcf&quot;) vcf.samples &lt;- suppressWarnings(vcfToDataframe(vcf.files, contig_mapping, gff.df = gff.df)) # annotate study metadata vcf.samples &lt;- merge(vcf.samples, design.df, by = &quot;mouse.id&quot;) vcf.samples$mouse.id &lt;- as.character(as.matrix(vcf.samples$mouse.id)) vcf.samples[which(vcf.samples$orf_desc == &quot;character(0)&quot;), ]$orf_desc &lt;- &quot;outside ORFs&quot; vcf.samples[which(vcf.samples$orf_desc == &quot;hypothetical protein&quot;), ]$orf_desc &lt;- &quot;hypothetical proteins&quot; vcf.samples[which(is.na(vcf.samples$vartype)), ]$vartype &lt;- &quot;unknown&quot; saveRDS(vcf.samples, file = &quot;data/rds/variants_lofreq.rds&quot;) # for varscan results vcf.files &lt;- Sys.glob(&quot;data/raw/varscan_eff/*.vcf&quot;) vcf.samples &lt;- suppressWarnings(vcfToDataframe(vcf.files, contig_mapping, gff.df = gff.df, varscan = T)) # annotate study metadata vcf.samples &lt;- merge(vcf.samples, design.df, by = &quot;mouse.id&quot;) vcf.samples$mouse.id &lt;- as.character(as.matrix(vcf.samples$mouse.id)) vcf.samples[which(vcf.samples$orf_desc == &quot;character(0)&quot;), ]$orf_desc &lt;- &quot;outside ORFs&quot; vcf.samples[which(vcf.samples$orf_desc == &quot;hypothetical protein&quot;), ]$orf_desc &lt;- &quot;hypothetical proteins&quot; vcf.samples[which(is.na(vcf.samples$vartype)), ]$vartype &lt;- &quot;unknown&quot; saveRDS(vcf.samples, file = &quot;data/rds/variants_varscan.rds&quot;) The dataset is written to data/rds/variants_lofreq.rds and data/rds/variants_varscan.rds 3.2 Quality of variants DP is the filtered depth, at the sample level. This gives you the number of filtered reads that support each of the reported alleles. You can check the variant caller’s documentation to see which filters are applied by default. Only reads that passed the variant caller’s filters are included in this number. However, unlike the AD calculation, uninformative reads are included in DP. 3.2.1 lofreq dat &lt;- readRDS(&quot;data/rds/variants.rds&quot;) dat &lt;- dat[which(dat$ecoli == FALSE), ] print(summary(dat$dp)) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 16.0 78.5 200.0 381.4 456.0 2480.0 3.2.2 all samples p &lt;- ggplot(dat, aes(dp, fill = genome)) + geom_histogram() p &lt;- p + theme_classic() + xlab(&quot;filtered depth&quot;) + ylab(&quot;occurence&quot;) p &lt;- p + scale_fill_manual(values = omm_colors) plotly::ggplotly(p) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Figure 3.1: filtred depth of varaints (all samples) 3.2.3 by mouse p &lt;- ggplot(dat, aes(dp, fill = genome)) + geom_histogram() p &lt;- p + theme_classic() + xlab(&quot;filtered depth&quot;) + ylab(&quot;occurence&quot;) p &lt;- p + scale_fill_manual(values = omm_colors) + facet_wrap(~mouse.id + desc, ncol = 2) p &lt;- p + theme(panel.border = element_blank(), strip.text = element_text(size = 12, colour = &quot;black&quot;), strip.background = element_rect(colour = &quot;white&quot;, fill = &quot;white&quot;)) plotly::ggplotly(p) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Figure 3.2: filtred depth of varaints by mouse 3.3 Number of variants 3.3.1 by sample only non-ecoli samples dat &lt;- readRDS(&quot;data/rds/variants.rds&quot;) dat &lt;- dat[which(dat$ecoli == FALSE), ] This set contains 727 variants found in 12 genomes. The detailed breakdow of variants per genome is as follows. dat$dummy &lt;- 1 dat.by.sample.genome &lt;- aggregate(dummy ~ mouse.id + genome, dat, sum) colnames(dat.by.sample.genome) &lt;- c(&quot;sample&quot;, &quot;genome&quot;, &quot;number_variants&quot;) DT::datatable(dat.by.sample.genome) p &lt;- ggplot(dat.by.sample.genome, aes(x = reorder(sample, number_variants), y = number_variants, fill = genome)) p &lt;- p + geom_bar(stat = &quot;identity&quot;) + coord_flip() + theme_classic() p &lt;- p + ylab(&quot;number of variants&quot;) + xlab(&quot;sample&quot;) + scale_fill_manual(values = omm_colors) plotly::ggplotly(p) Figure 3.3: Number of variants by genome (color) found in samples 3.3.2 by mouse and genome only non-ecoli samples dat$dummy &lt;- 1 dat.by.sample &lt;- aggregate(dummy ~ mouse.id, dat, sum) colnames(dat.by.sample) &lt;- c(&quot;sample&quot;, &quot;number_variants&quot;) DT::datatable(dat.by.sample) p &lt;- ggplot(dat.by.sample, aes(x = reorder(sample, number_variants), y = number_variants)) p &lt;- p + geom_bar(stat = &quot;identity&quot;) + coord_flip() + theme_classic() p &lt;- p + xlab(&quot;number of variants&quot;) + ylab(&quot;sample&quot;) plotly::ggplotly(p) Figure 3.4: number of variants of all 12 OMM genomes by mouse 3.3.3 by extendet metadata only non-ecoli samples dat$dummy &lt;- 1 dat.by.sample.genome2 &lt;- aggregate(dummy ~ mouse.id + genome + generation + ecoli + desc + day, dat, sum) colnames(dat.by.sample.genome2) &lt;- c(&quot;sample&quot;, &quot;genome&quot;, &quot;generation&quot;, &quot;ecoli&quot;, &quot;desc&quot;, &quot;day&quot;, &quot;number_variants&quot;) DT::datatable(dat.by.sample.genome2) dat$DP &lt;- NULL # dat.by.sample.genome2 &lt;- # dat.by.sample.genome2[which(dat.by.sample.genome2$sample != &#39;I_cc&#39; &amp; # dat.by.sample.genome2$sample != &#39;I_mi&#39;),] p &lt;- ggplot(dat.by.sample.genome2, aes(x = sample, y = number_variants, fill = genome)) p &lt;- p + geom_bar(stat = &quot;identity&quot;) + theme_classic() p &lt;- p + facet_grid(. ~ generation + day, scales = &quot;free_x&quot;) p &lt;- p + ylab(&quot;number of variants&quot;) + xlab(&quot;sample&quot;) + scale_fill_manual(values = omm_colors) p &lt;- p + theme(panel.border = element_blank(), strip.text = element_text(size = 12, colour = &quot;black&quot;), strip.background = element_rect(colour = &quot;white&quot;, fill = &quot;white&quot;)) print(p) # plotly is not working on this type of plot Figure 3.5: Number of variants by genome (color) found in samples 3.4 ORFs with variants In this section we visualze the occurence of ORFs and their annotations of overlaying variants. The full table is available in this github repository under data/tables/table1.tsv. 3.4.1 Data 3.4.1.1 Write to table write.table(dat, file = &quot;data/tables/table1.tsv&quot;, sep = &quot;\\t&quot;, row.names = F, quote = F) 3.4.1.2 Aggregate by mouse The total number of variant overlapts to ORF per mouse, ordered by their occurence is below and can in data/tables/table2.tsv dat.all &lt;- aggregate(dummy ~ genome + orf_desc, dat, sum) colnames(dat.all) &lt;- c(&quot;genome&quot;, &quot;orf_annotation&quot;, &quot;occurence&quot;) write.table(dat.all, file = &quot;data/tables/table2.tsv&quot;, sep = &quot;\\t&quot;, row.names = F, quote = F) dat.all &lt;- dat.all[order(dat.all$occurence, decreasing = TRUE), ] DT::datatable(dat.all) 3.4.2 Statistics In total, we identified 727 variants in all 10 samples. Of them, 727 variants map to 89 ORFs with an annotated function 3.4.3 Minor to major transistion 3.4.3.1 Plotting function pairedAFplot &lt;- function(dat = dat, case = &quot;1607&quot;, control = &quot;1885&quot;) { require(reshape2) require(ggplot2) dat.pair &lt;- dat[which(dat$mouse.id == case | dat$mouse.id == control), ] # dat.pair &lt;- dat.pair[which(!is.na(dat.pair$orf_desc)),] data.wide &lt;- dcast(dat.pair, genome + POS + REF + ALT + orf_desc + vartype ~ mouse.id, value.var = &quot;AF&quot;) colnames(data.wide)[7] &lt;- &quot;sample_1&quot; colnames(data.wide)[8] &lt;- &quot;sample_2&quot; data.wide[is.na(data.wide)] &lt;- 0 p &lt;- ggplot(data.wide, aes(x = sample_1, y = sample_2, color = genome, label = orf_desc)) #, shape = vartype)) p &lt;- p + geom_point(fill = NA) + theme_classic() + scale_color_manual(values = omm_colors) p &lt;- p + geom_hline(yintercept = 0.5, linetype = 2, color = &quot;grey50&quot;) p &lt;- p + geom_vline(xintercept = 0.5, linetype = 2, color = &quot;grey50&quot;) p &lt;- p + theme(aspect.ratio = 1) # p &lt;- p + scale_shape_manual(values = variant_shapes) p &lt;- p + theme(strip.background = element_blank()) p &lt;- p + geom_abline(intercept = 0, slope = 1) p &lt;- p + xlab(paste0(&quot;sample &quot;, case)) + ylab(paste0(&quot;sample &quot;, control)) p &lt;- p + theme(panel.border = element_rect(colour = &quot;black&quot;, fill = NA, size = 1)) return(p) } 3.4.3.2 between generation comparison 3.4.3.2.1 comparison of t=20 of first/second generation suppressWarnings(ggplotly(pairedAFplot(dat, case = &quot;1607&quot;, control = &quot;1885&quot;))) Figure 3.6: Scatter plot of AF of two samples. Only variants with functional annotation are shown 3.4.3.2.2 comparison of t=40 of first/second generation (sample 1660) suppressWarnings(ggplotly(pairedAFplot(dat, case = &quot;1660&quot;, control = &quot;1807&quot;))) Figure 3.7: Scatter plot of AF of two samples. Only variants with functional annotation are shown 3.4.3.2.3 comparison of t=40 of first/second generation (sample 1750) suppressWarnings(ggplotly(pairedAFplot(dat, case = &quot;1750&quot;, control = &quot;1807&quot;))) Figure 3.8: Scatter plot of AF of two samples. Only variants with functional annotation are shown 3.4.3.2.4 comparison of t=80 of first/second generation suppressWarnings(ggplotly(pairedAFplot(dat, case = &quot;1779&quot;, control = &quot;1789&quot;))) Figure 3.9: Scatter plot of AF of two samples. Only variants with functional annotation are shown 3.4.3.2.5 comparison of t=80 of first/second generation suppressWarnings(ggplotly(pairedAFplot(dat, case = &quot;1779&quot;, control = &quot;1789&quot;))) Figure 3.10: Scatter plot of AF of two samples. Only variants with functional annotation are shown 3.4.3.3 within generation comparison of gen=1 3.4.3.3.1 t=20 vs t=40 suppressWarnings(ggplotly(pairedAFplot(dat, case = &quot;1607&quot;, control = &quot;1660&quot;))) Figure 3.11: Scatter plot of AF of two samples. Only variants with functional annotation are shown 3.4.3.3.2 t=40 vs t=80 suppressWarnings(ggplotly(pairedAFplot(dat, case = &quot;1660&quot;, control = &quot;1779&quot;))) Figure 3.12: Scatter plot of AF of two samples. Only variants with functional annotation are shown 3.4.3.4 within generation comparison of gen=2 3.4.3.4.1 t=20 vs t=40 suppressWarnings(ggplotly(pairedAFplot(dat, case = &quot;1885&quot;, control = &quot;1807&quot;))) Figure 3.13: Scatter plot of AF of two samples. Only variants with functional annotation are shown 3.4.3.4.2 t=40 vs t=80 suppressWarnings(ggplotly(pairedAFplot(dat, case = &quot;1807&quot;, control = &quot;1789&quot;))) Figure 3.14: Scatter plot of AF of two samples. Only variants with functional annotation are shown 3.4.3.5 I_mi comparison 3.4.3.5.1 t=20 gen=2 suppressWarnings(ggplotly(pairedAFplot(dat, case = &quot;I_mi&quot;, control = &quot;1885&quot;))) Figure 3.15: Scatter plot of AF of two samples. Only variants with functional annotation are shown 3.4.3.5.2 t=40 gen=2 suppressWarnings(ggplotly(pairedAFplot(dat, case = &quot;I_mi&quot;, control = &quot;1807&quot;))) Figure 3.16: Scatter plot of AF of two samples. Only variants with functional annotation are shown 3.4.4 Gene-centric analysis 3.4.4.1 function geneCentricPlot &lt;- function(dat = dat, genome = &quot;yl44&quot;) { require(reshape2) require(ggplot2) dat.subset &lt;- dat[which(dat$genome == genome), ] dat.subset$ID &lt;- paste0(dat.subset$POS, &quot;|&quot;, dat.subset$REF, &quot;-&gt;&quot;, dat.subset$ALT) p &lt;- ggplot(dat.subset, aes(x = ID, y = AF, color = desc, shape = vartype)) p &lt;- p + geom_point(size = 4, fill = NA) p &lt;- p + coord_flip() + theme_classic() p &lt;- p + facet_grid(orf_desc ~ ., scales = &quot;free&quot;, space = &quot;free&quot;) p &lt;- p + ylim(c(0, 1)) # p &lt;- p + scale_shape_manual(values = variant_shapes) p &lt;- p + theme(strip.text.y = element_text(angle = 0), strip.placement = &quot;outside&quot;) p &lt;- p + xlab(&quot;&quot;) + ylab(&quot;allele frequency&quot;) + scale_color_manual(values = sample_colors) return(p) } # no grid version for html geneCentricPlot2 &lt;- function(dat = dat, genome = &quot;yl44&quot;) { require(reshape2) require(ggplot2) dat.subset &lt;- dat[which(dat$genome == genome), ] dat.subset$ID &lt;- paste0(dat.subset$POS, &quot;|&quot;, dat.subset$REF, &quot;-&gt;&quot;, dat.subset$ALT) p &lt;- ggplot(dat.subset, aes(x = orf_desc, y = AF, color = desc, shape = vartype)) p &lt;- p + geom_point(size = 4, fill = NA) p &lt;- p + coord_flip() + theme_classic() p &lt;- p + ylim(c(0, 1)) # p &lt;- p + scale_shape_manual(values = variant_shapes) p &lt;- p + theme(strip.background = element_blank()) + theme(strip.text.y = element_text(angle = 0), strip.placement = &quot;outside&quot;) p &lt;- p + xlab(&quot;&quot;) + ylab(&quot;allele frequency&quot;) + scale_color_manual(values = sample_colors) return(p) } 3.4.4.2 by ORF annotation (html) 3.4.4.2.1 yl44 suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;yl44&quot;))) Figure 3.17: AF by function of one genome 3.4.4.2.2 yl27 suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;yl27&quot;))) Figure 3.18: AF by function of one genome 3.4.4.2.3 yl58 suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;yl58&quot;))) Figure 3.19: AF by function of one genome 3.4.4.2.4 i48 suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;i48&quot;))) Figure 3.20: AF by function of one genome 3.4.4.2.5 yl32 suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;yl32&quot;))) Figure 3.21: AF by function of one genome 3.4.4.2.6 i46 suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;i46&quot;))) Figure 3.22: AF by function of one genome 3.4.4.2.7 yl45 suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;yl45&quot;))) Figure 3.23: AF by function of one genome 3.4.4.2.8 yl31 suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;yl31&quot;))) Figure 3.24: AF by function of one genome 3.4.4.2.9 yl2 suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;yl2&quot;))) Figure 3.25: AF by function of one genome 3.4.4.2.10 i49 suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;i49&quot;))) Figure 3.26: AF by function of one genome 3.4.4.2.11 kb18 no variant # suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &#39;kb18&#39;)) 3.4.4.2.12 kb1 suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;kb1&quot;))) Figure 3.27: AF by function of one genome 3.4.5 by variant (static) similar to the plots above, but now the y axis is not the annotation but the variant ID (e.g. position|reference-&gt;alternative) 3.4.5.0.1 yl44 suppressWarnings(geneCentricPlot(dat, genome = &quot;yl44&quot;)) Figure 3.28: AF by function of one genome 3.4.5.0.2 yl27 suppressWarnings(geneCentricPlot(dat, genome = &quot;yl27&quot;)) Figure 3.29: AF by function of one genome 3.4.5.0.3 yl58 suppressWarnings(geneCentricPlot(dat, genome = &quot;yl58&quot;)) Figure 3.30: AF by function of one genome 3.4.5.0.4 i48 suppressWarnings(geneCentricPlot(dat, genome = &quot;i48&quot;)) Figure 3.31: AF by function of one genome 3.4.5.0.5 yl32 suppressWarnings(geneCentricPlot(dat, genome = &quot;yl32&quot;)) Figure 3.32: AF by function of one genome 3.4.5.0.6 i46 suppressWarnings(geneCentricPlot(dat, genome = &quot;i46&quot;)) Figure 3.33: AF by function of one genome 3.4.5.0.7 yl45 suppressWarnings(geneCentricPlot(dat, genome = &quot;yl45&quot;)) Figure 3.34: AF by function of one genome 3.4.5.0.8 yl31 suppressWarnings(geneCentricPlot(dat, genome = &quot;yl31&quot;)) Figure 3.35: AF by function of one genome 3.4.5.0.9 yl2 suppressWarnings(geneCentricPlot(dat, genome = &quot;yl2&quot;)) Figure 3.36: AF by function of one genome 3.4.5.0.10 i49 suppressWarnings(geneCentricPlot(dat, genome = &quot;i49&quot;)) Figure 3.37: AF by function of one genome 3.4.5.0.11 kb18 no variant # suppressWarnings(ggplotly(geneCentricPlot(dat, genome = &#39;kb18&#39;)) 3.4.5.0.12 kb1 suppressWarnings(geneCentricPlot(dat, genome = &quot;kb1&quot;)) Figure 3.38: AF by function of one genome "],
["Allele-frequency.html", "Section 4 Allele frequency 4.1 major allele frequency", " Section 4 Allele frequency 4.1 major allele frequency 4.1.1 all samples and all genomes without E. Coli dat &lt;- readRDS(&quot;data/rds/variants.rds&quot;) dat &lt;- dat[which(dat$ecoli == FALSE), ] p &lt;- ggplot(dat, aes(x = majorAF, y = mouse.id)) p &lt;- p + ggridges::geom_density_ridges(jittered_points = TRUE, position = ggridges::position_points_jitter(width = 0.01, height = 0), point_shape = &quot;|&quot;, point_size = 1, point_alpha = 0.5, alpha = 0.1) p &lt;- p + theme_classic() p &lt;- p + theme(strip.background = element_blank()) p &lt;- p + xlab(&quot;Major allele frequency&quot;) + ylab(&quot;Count&quot;) p ## Picking joint bandwidth of 0.0632 4.1.2 by sample and genome plotAFofSample &lt;- function(dat = dat) { p &lt;- ggplot(dat, aes(x = majorAF, y = genome, color = genome)) p &lt;- p + ggridges::geom_density_ridges(jittered_points = TRUE, position = ggridges::position_points_jitter(width = 0.01, height = 0), point_shape = &quot;|&quot;, point_size = 2, point_alpha = 1, alpha = 0.1) p &lt;- p + facet_wrap(~desc) p &lt;- p + theme_classic() + scale_color_manual(values = omm_colors) # p &lt;- p + facet_grid(phase ~., space = &#39;free&#39;, scales= &#39;free&#39;) p &lt;- p + theme(strip.background = element_blank()) p &lt;- p + xlab(&quot;Major allele frequency&quot;) + ylab(&quot;Genome&quot;) return(p) } suppressWarnings(plotAFofSample(dat)) ## Picking joint bandwidth of 0.0565 ## Picking joint bandwidth of 0.0601 ## Picking joint bandwidth of 0.0492 ## Picking joint bandwidth of 0.0549 ## Picking joint bandwidth of 0.0513 ## Picking joint bandwidth of 0.0366 ## Picking joint bandwidth of 0.0626 ## Picking joint bandwidth of 0.0767 ## Picking joint bandwidth of 0.0482 "],
["Variant-statistics-filtered.html", "Section 5 Variant statistics relative to I_mi 5.1 Number of variants 5.2 ORFs with variants", " Section 5 Variant statistics relative to I_mi dat &lt;- readRDS(&quot;data/rds/variants.rds&quot;) dat &lt;- dat[which(dat$ecoli == FALSE), ] dat$variant.id &lt;- paste0(dat$CHROM, dat$POS, dat$REF, dat$ALT) variants.to.remove &lt;- dat[which(dat$mouse.id == &quot;I_mi&quot;), ]$variant.id dat.relative &lt;- dat[!dat$variant.id %in% variants.to.remove, ] dat.removed &lt;- dat[dat$variant.id %in% variants.to.remove, ] dat.relative$variant.id &lt;- NULL saveRDS(dat.relative, file = &quot;data/rds/variants-relative.rds&quot;) From 243 total variants in all samples, we removed 110 variants that are present in I_mi, which results to a set of 0 unique variants. The excluded variants are: DT::datatable(dat.removed) 5.1 Number of variants 5.1.1 by sample only non-ecoli samples without variants that are present in I_mi dat &lt;- readRDS(&quot;data/rds/variants-relative.rds&quot;) dat &lt;- dat[which(dat$ecoli == FALSE), ] This set contains 284 variants found in 8 genomes. The detailed breakdow of variants per genome is as follows. dat$dummy &lt;- 1 dat.by.sample.genome &lt;- aggregate(dummy ~ mouse.id + genome, dat, sum) colnames(dat.by.sample.genome) &lt;- c(&quot;sample&quot;, &quot;genome&quot;, &quot;number_variants&quot;) DT::datatable(dat.by.sample.genome) p &lt;- ggplot(dat.by.sample.genome, aes(x = reorder(sample, number_variants), y = number_variants, fill = genome)) p &lt;- p + geom_bar(stat = &quot;identity&quot;) + coord_flip() + theme_classic() p &lt;- p + ylab(&quot;number of variants&quot;) + xlab(&quot;sample&quot;) + scale_fill_manual(values = omm_colors) plotly::ggplotly(p) Figure 5.1: Number of variants by genome (color) found in samples 5.1.2 by extendet metadata only non-ecoli samples without variants that are present in I_mi dat$dummy &lt;- 1 dat.by.sample.genome2 &lt;- aggregate(dummy ~ mouse.id + genome + generation + ecoli + desc + day, dat, sum) colnames(dat.by.sample.genome2) &lt;- c(&quot;sample&quot;, &quot;genome&quot;, &quot;generation&quot;, &quot;ecoli&quot;, &quot;desc&quot;, &quot;day&quot;, &quot;number_variants&quot;) DT::datatable(dat.by.sample.genome2) dat$DP &lt;- NULL # dat.by.sample.genome2 &lt;- # dat.by.sample.genome2[which(dat.by.sample.genome2$sample != &#39;I_cc&#39; &amp; # dat.by.sample.genome2$sample != &#39;I_mi&#39;),] p &lt;- ggplot(dat.by.sample.genome2, aes(x = sample, y = number_variants, fill = genome)) p &lt;- p + geom_bar(stat = &quot;identity&quot;) + theme_classic() p &lt;- p + facet_grid(. ~ generation + day, scales = &quot;free_x&quot;) p &lt;- p + ylab(&quot;number of variants&quot;) + xlab(&quot;sample&quot;) + scale_fill_manual(values = omm_colors) p &lt;- p + theme(panel.border = element_blank(), strip.text = element_text(size = 12, colour = &quot;black&quot;), strip.background = element_rect(colour = &quot;white&quot;, fill = &quot;white&quot;)) print(p) # plotly is not working on this type of plot Figure 5.2: Number of variants by genome (color) found in samples 5.2 ORFs with variants In this section we visualze the occurence of ORFs and their annotations of overlaying variants. The full table is available in this github repository under data/tables/table1_relative_to_imi.tsv. 5.2.1 Data 5.2.1.1 Write to table write.table(dat, file = &quot;data/tables/table1_relative_to_imi.tsv&quot;, sep = &quot;\\t&quot;, row.names = F, quote = F) 5.2.1.2 Aggregate by mouse The total number of variant overlapts to ORF per mouse, ordered by their occurence is below and can in data/tables/table2.tsv dat.all &lt;- aggregate(dummy ~ genome + orf_desc, dat, sum) colnames(dat.all) &lt;- c(&quot;genome&quot;, &quot;orf_annotation&quot;, &quot;occurence&quot;) write.table(dat.all, file = &quot;data/tables/table2.tsv&quot;, sep = &quot;\\t&quot;, row.names = F, quote = F) dat.all &lt;- dat.all[order(dat.all$occurence, decreasing = TRUE), ] DT::datatable(dat.all) 5.2.2 Statistics In total, we identified 284 variants in all 9 samples. Of them, 284 variants map to 59 ORFs with an annotated function 5.2.3 Minor to major transistion 5.2.3.1 Plotting function pairedAFplot &lt;- function(dat = dat, case = &quot;1607&quot;, control = &quot;1885&quot;) { require(reshape2) require(ggplot2) dat.pair &lt;- dat[which(dat$mouse.id == case | dat$mouse.id == control), ] # dat.pair &lt;- dat.pair[which(!is.na(dat.pair$orf_desc)),] data.wide &lt;- dcast(dat.pair, genome + POS + REF + ALT + orf_desc + vartype ~ mouse.id, value.var = &quot;AF&quot;) colnames(data.wide)[7] &lt;- &quot;sample_1&quot; colnames(data.wide)[8] &lt;- &quot;sample_2&quot; data.wide[is.na(data.wide)] &lt;- 0 p &lt;- ggplot(data.wide, aes(x = sample_1, y = sample_2, color = genome, label = orf_desc, shape = vartype)) p &lt;- p + geom_point(fill = NA) + theme_classic() + scale_color_manual(values = omm_colors) p &lt;- p + geom_hline(yintercept = 0.5, linetype = 2, color = &quot;grey50&quot;) p &lt;- p + geom_vline(xintercept = 0.5, linetype = 2, color = &quot;grey50&quot;) p &lt;- p + theme(aspect.ratio = 1) p &lt;- p + scale_shape_manual(values = variant_shapes) p &lt;- p + theme(strip.background = element_blank()) p &lt;- p + geom_abline(intercept = 0, slope = 1) p &lt;- p + xlab(paste0(&quot;sample &quot;, case)) + ylab(paste0(&quot;sample &quot;, control)) p &lt;- p + theme(panel.border = element_rect(colour = &quot;black&quot;, fill = NA, size = 1)) return(p) } 5.2.3.2 between generation comparison 5.2.3.2.1 comparison of t=20 of first/second generation suppressWarnings(ggplotly(pairedAFplot(dat, case = &quot;1607&quot;, control = &quot;1885&quot;))) Figure 5.3: Scatter plot of AF of two samples. Only variants with functional annotation are shown 5.2.3.2.2 comparison of t=40 of first/second generation (sample 1660) suppressWarnings(ggplotly(pairedAFplot(dat, case = &quot;1660&quot;, control = &quot;1807&quot;))) Figure 5.4: Scatter plot of AF of two samples. Only variants with functional annotation are shown 5.2.3.2.3 comparison of t=40 of first/second generation (sample 1750) suppressWarnings(ggplotly(pairedAFplot(dat, case = &quot;1750&quot;, control = &quot;1807&quot;))) Figure 5.5: Scatter plot of AF of two samples. Only variants with functional annotation are shown 5.2.3.2.4 comparison of t=80 of first/second generation suppressWarnings(ggplotly(pairedAFplot(dat, case = &quot;1779&quot;, control = &quot;1789&quot;))) Figure 5.6: Scatter plot of AF of two samples. Only variants with functional annotation are shown 5.2.3.2.5 comparison of t=80 of first/second generation suppressWarnings(ggplotly(pairedAFplot(dat, case = &quot;1779&quot;, control = &quot;1789&quot;))) Figure 5.7: Scatter plot of AF of two samples. Only variants with functional annotation are shown 5.2.3.3 within generation comparison of gen=1 5.2.3.3.1 t=20 vs t=40 suppressWarnings(ggplotly(pairedAFplot(dat, case = &quot;1607&quot;, control = &quot;1660&quot;))) Figure 5.8: Scatter plot of AF of two samples. Only variants with functional annotation are shown 5.2.3.3.2 t=40 vs t=80 suppressWarnings(ggplotly(pairedAFplot(dat, case = &quot;1660&quot;, control = &quot;1779&quot;))) Figure 5.9: Scatter plot of AF of two samples. Only variants with functional annotation are shown 5.2.3.4 within generation comparison of gen=2 5.2.3.4.1 t=20 vs t=40 suppressWarnings(ggplotly(pairedAFplot(dat, case = &quot;1885&quot;, control = &quot;1807&quot;))) Figure 5.10: Scatter plot of AF of two samples. Only variants with functional annotation are shown 5.2.3.4.2 t=40 vs t=80 suppressWarnings(ggplotly(pairedAFplot(dat, case = &quot;1807&quot;, control = &quot;1789&quot;))) Figure 5.11: Scatter plot of AF of two samples. Only variants with functional annotation are shown 5.2.4 Gene-centric analysis 5.2.4.1 function geneCentricPlot &lt;- function(dat = dat, genome = &quot;yl44&quot;) { require(reshape2) require(ggplot2) dat.subset &lt;- dat[which(dat$genome == genome), ] dat.subset$ID &lt;- paste0(dat.subset$POS, &quot;|&quot;, dat.subset$REF, &quot;-&gt;&quot;, dat.subset$ALT) p &lt;- ggplot(dat.subset, aes(x = ID, y = AF, color = desc, shape = vartype)) p &lt;- p + geom_point(size = 4, fill = NA) p &lt;- p + coord_flip() + theme_classic() p &lt;- p + facet_grid(orf_desc ~ ., scales = &quot;free&quot;, space = &quot;free&quot;) p &lt;- p + ylim(c(0, 1)) p &lt;- p + scale_shape_manual(values = variant_shapes) p &lt;- p + theme(strip.text.y = element_text(angle = 0), strip.placement = &quot;outside&quot;) p &lt;- p + xlab(&quot;&quot;) + ylab(&quot;allele frequency&quot;) + scale_color_manual(values = sample_colors) return(p) } # no grid version for html geneCentricPlot2 &lt;- function(dat = dat, genome = &quot;yl44&quot;) { require(reshape2) require(ggplot2) dat.subset &lt;- dat[which(dat$genome == genome), ] dat.subset$ID &lt;- paste0(dat.subset$POS, &quot;|&quot;, dat.subset$REF, &quot;-&gt;&quot;, dat.subset$ALT) p &lt;- ggplot(dat.subset, aes(x = orf_desc, y = AF, color = desc, shape = vartype)) p &lt;- p + geom_point(size = 4, fill = NA) p &lt;- p + coord_flip() + theme_classic() p &lt;- p + ylim(c(0, 1)) p &lt;- p + scale_shape_manual(values = variant_shapes) p &lt;- p + theme(strip.background = element_blank()) + theme(strip.text.y = element_text(angle = 0), strip.placement = &quot;outside&quot;) p &lt;- p + xlab(&quot;&quot;) + ylab(&quot;allele frequency&quot;) + scale_color_manual(values = sample_colors) return(p) } 5.2.4.2 by ORF annotation (html) 5.2.4.2.1 yl44 suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;yl44&quot;))) Figure 5.12: AF by function of one genome 5.2.4.2.2 yl27 suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;yl27&quot;))) Figure 5.13: AF by function of one genome 5.2.4.2.3 yl58 suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;yl58&quot;))) Figure 5.14: AF by function of one genome 5.2.4.2.4 i48 suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;i48&quot;))) Figure 5.15: AF by function of one genome 5.2.4.2.5 yl32 suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;yl32&quot;))) Figure 5.16: AF by function of one genome 5.2.4.2.6 i46 # suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &#39;i46&#39;))) 5.2.4.2.7 yl45 suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;yl45&quot;))) Figure 5.17: AF by function of one genome 5.2.4.2.8 yl31 suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;yl31&quot;))) Figure 5.18: AF by function of one genome 5.2.4.2.9 yl2 suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;yl2&quot;))) Figure 5.19: AF by function of one genome 5.2.4.2.10 i49 no variant? # $suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &#39;i49&#39;))) 5.2.4.2.11 kb18 no variant # suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &#39;kb18&#39;)) 5.2.4.2.12 kb1 no variant? # suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &#39;kb1&#39;))) 5.2.5 by variant (static) similar to the plots above, but now the y axis is not the annotation but the variant ID (e.g. position|reference-&gt;alternative) 5.2.5.0.1 yl44 suppressWarnings(geneCentricPlot(dat, genome = &quot;yl44&quot;)) Figure 5.20: AF by function of one genome 5.2.5.0.2 yl27 suppressWarnings(geneCentricPlot(dat, genome = &quot;yl27&quot;)) Figure 5.21: AF by function of one genome 5.2.5.0.3 yl58 suppressWarnings(geneCentricPlot(dat, genome = &quot;yl58&quot;)) Figure 5.22: AF by function of one genome 5.2.5.0.4 i48 suppressWarnings(geneCentricPlot(dat, genome = &quot;i48&quot;)) Figure 5.23: AF by function of one genome 5.2.5.0.5 yl32 suppressWarnings(geneCentricPlot(dat, genome = &quot;yl32&quot;)) Figure 5.24: AF by function of one genome 5.2.5.0.6 i46 # suppressWarnings(geneCentricPlot(dat, genome = &#39;i46&#39;)) 5.2.5.0.7 yl45 suppressWarnings(geneCentricPlot(dat, genome = &quot;yl45&quot;)) Figure 5.25: AF by function of one genome 5.2.5.0.8 yl31 suppressWarnings(geneCentricPlot(dat, genome = &quot;yl31&quot;)) Figure 5.26: AF by function of one genome 5.2.5.0.9 yl2 suppressWarnings(geneCentricPlot(dat, genome = &quot;yl2&quot;)) Figure 5.27: AF by function of one genome 5.2.5.0.10 i49 # suppressWarnings(geneCentricPlot(dat, genome = &#39;i49&#39;)) 5.2.5.0.11 kb18 no variant # suppressWarnings(ggplotly(geneCentricPlot(dat, genome = &#39;kb18&#39;)) 5.2.5.0.12 kb1 # suppressWarnings(geneCentricPlot(dat, genome = &#39;kb1&#39;)) "],
["variant-effects.html", "Section 6 Variant effects 6.1 snpEff run 6.2 number of effects by type 6.3 number of effects by type by genome (vartype) 6.4 number of effects by type by genome (effect) 6.5 by genome and mouse", " Section 6 Variant effects 6.1 snpEff run We generated a snpEff databse for OMM genomes and processed vcf files with snpEff. The files.txt used lists all the vcf files. This will result in a new set of vcf files with a ANN field. cd /home/aime/projects/oligomm-claudia/data/tools/snpEff java -jar snpEff.jar build -gff3 -v omm # files needed for this step are snpEff.config and data/omm cd /home/aime/projects/oligomm-claudia/data/raw/lofreq java -jar /home/aime/projects/oligomm-claudia/data/tools/snpEff/snpEff.jar eff -no-downstream -no-upstream -no-utr -no-intergenic -o vcf -c /home/aime/projects/oligomm-claudia/data/tools/snpEff/snpEff.config omm -fileList files.txt cd /home/aime/projects/oligomm-claudia/data/raw/varscan/ java -jar /home/aime/projects/oligomm-claudia/data/tools/snpEff/snpEff.jar eff -no-downstream -no-upstream -no-utr -no-intergenic -o vcf -c /home/aime/projects/oligomm-claudia/data/tools/snpEff/snpEff.config omm -fileList files.txt 6.2 number of effects by type Name name_classic Note Impact synonymous_variant SYNONYMOUS_CODING Variant causes a codon that produces the same amino acid e.g.: Ttg-Ctg, L-L LOW stop_gained STOP_GAINED Variant causes a STOP codon e.g.: Cag-Tag, Q-* HIGH start_lost START_LOST Variant causes start codon to be mutated into a non-start codon. e.g.: aTg-aGg, M-R HIGH transcript_variant TRANSCRIPT The variant hits a transcript. MODIFIER missense_variant NON_SYNONYMOUS_CODING Variant causes a codon that produces a different amino acid e.g.: Tgg-Cgg, W-R MODERATE intragenic_variant INTRAGENIC The variant hits a gene, but no transcripts within the gene MODIFIER # load variant statistics that got processed by snpEff (added information to the # ANN field) dat &lt;- readRDS(&quot;data/rds/variants.rds&quot;) dat &lt;- dat[which(dat$ecoli == FALSE), ] DT::datatable(as.data.frame(table(dat$effect))) DT::datatable(as.data.frame(table(dat$vartype))) 0 variants are with NA in their snpEff annotation, not sure why this is the case. 727 variants have snpEff annotation. 6.3 number of effects by type by genome (vartype) list of variants and their impact SnpEff manual dat$dummy &lt;- 1 dat.by.genome &lt;- aggregate(dummy ~ genome + vartype, dat, sum) colnames(dat.by.genome) &lt;- c(&quot;genome&quot;, &quot;vartype&quot;, &quot;occurence&quot;) dat.by.genome &lt;- dat.by.genome[order(dat.by.genome$occurence, decreasing = TRUE), ] write.table(dat.by.genome, file = &quot;data/tables/table3.tsv&quot;, sep = &quot;\\t&quot;, row.names = F, quote = F) DT::datatable(dat.by.genome) p &lt;- ggplot(dat.by.genome, aes(x = reorder(genome, occurence), y = occurence, fill = vartype)) p &lt;- p + geom_bar(stat = &quot;identity&quot;) + theme_classic() + coord_flip() p &lt;- p + ylab(&quot;number of variants&quot;) + xlab(&quot;genome&quot;) + scale_fill_manual(values = variant_colors) plotly::ggplotly(p, width = 1000) Figure 6.1: Number of variants types by genome 6.4 number of effects by type by genome (effect) Putative_impact: A simple estimation of putative impact / deleteriousness : {HIGH, MODERATE, LOW, MODIFIER} dat$dummy &lt;- 1 dat.by.genome &lt;- aggregate(dummy ~ genome + effect, dat, sum) colnames(dat.by.genome) &lt;- c(&quot;genome&quot;, &quot;effect&quot;, &quot;occurence&quot;) dat.by.genome &lt;- dat.by.genome[order(dat.by.genome$occurence, decreasing = TRUE), ] write.table(dat.by.genome, file = &quot;data/tables/table4.tsv&quot;, sep = &quot;\\t&quot;, row.names = F, quote = F) DT::datatable(dat.by.genome) p &lt;- ggplot(dat.by.genome, aes(x = reorder(genome, occurence), y = occurence, fill = effect)) p &lt;- p + geom_bar(stat = &quot;identity&quot;) + theme_classic() + coord_flip() p &lt;- p + ylab(&quot;number of variants&quot;) + xlab(&quot;genome&quot;) plotly::ggplotly(p, width = 1000) Figure 6.2: Number of variants by variant effect by genome 6.5 by genome and mouse dat$dummy &lt;- 1 dat.by.mouse &lt;- aggregate(dummy ~ genome + mouse.id + desc + vartype, dat, sum) colnames(dat.by.mouse) &lt;- c(&quot;genome&quot;, &quot;mouse.id&quot;, &quot;desc&quot;, &quot;vartype&quot;, &quot;occurence&quot;) dat.by.mouse &lt;- dat.by.mouse[order(dat.by.mouse$occurence, decreasing = TRUE), ] write.table(dat.by.mouse, file = &quot;data/tables/table5.tsv&quot;, sep = &quot;\\t&quot;, row.names = F, quote = F) DT::datatable(dat.by.mouse) p &lt;- ggplot(dat.by.mouse, aes(x = reorder(genome, occurence), y = occurence, fill = vartype)) p &lt;- p + geom_bar(stat = &quot;identity&quot;) + theme_classic() + coord_flip() + facet_wrap(~desc) p &lt;- p + ylab(&quot;number of variants&quot;) + xlab(&quot;genome&quot;) + scale_fill_manual(values = variant_colors) plotly::ggplotly(p, width = 1000, height = 1200) Figure 6.3: Number of variant types by genome and mouse "],
["resequencing.html", "Section 7 Resequencing 7.1 Metadata 7.2 Load in variants 7.3 KB1 7.4 I46 7.5 YL58 7.6 mutation bias? 7.7 heatmap", " Section 7 Resequencing 7.1 Metadata Sample Genome Group Species DR4 KB1 1687 Enterococcus_faecalis DR1 KB1 1681 Enterococcus_faecalis DR8 KB1 1691 Enterococcus_faecalis DR11 KB1 1696 Enterococcus_faecalis DR3 I46 1681 Clostridium_innocuum DR6 I46 1687 Clostridium_innocuum DR10 I46 1691 Clostridium_innocuum DR12 I46 1696 Clostridium_innocuum DR7 YL58 1687 Blautia_coccoides DR13 YL58 1696 Blautia_coccoides 7.2 Load in variants source(&quot;utils.R&quot;) orf_shapes = c(coding = 15, `non-coding` = 3) vcfToDataframe &lt;- function(vcf.files, contig_mapping = read.csv2(&quot;data/contig_genome_mapping.csv&quot;), gff.df = gff.df, varscan = F) { require(vcfR) res &lt;- list() for (file in vcf.files) { message(file) vcf.content &lt;- vcfR::read.vcfR(file, verbose = FALSE) vcf.fix &lt;- as.data.frame(vcf.content@fix) # contains chr, position and substitution informations vcf.info &lt;- vcfR::INFO2df(vcf.content) # get INFO field, contains DP, AF informations # no annotation since they are not yet processed with snpEff vcf.ann &lt;- # data.frame(do.call(&#39;rbind&#39;, strsplit(as.character(vcf.info$ANN),&#39;|&#39;,fixed = # TRUE))) # split ANN field, contains information if files are processed by # snpEff there are variants if (nrow(vcf.fix) &gt; 0) { dat &lt;- as.data.frame(cbind(vcf.fix[, c(1, 2, 4, 5, 6)], vcf.info[, c(1, 2)])) dat$majorAF &lt;- sapply(dat$AF, minorAfToMajorAf) # transforms e.g. AF of 0.1 to 0.9, 0.9 stays 0.9 and 0.5 stays 0.5 dat$genome &lt;- contig_mapping[match(dat$CHROM, contig_mapping$contig), ]$genome # map chr information to genome name e.g. NHMU01000001.1 -&gt; i48 dat$genome_hr &lt;- translateGenomeIdToFullName(tolower(dat$genome)) dat$mouse.id &lt;- translateSampletoMouse(tools::file_path_sans_ext(basename(file))) dat$mouse.group &lt;- translateMouseIdToTreatmentGroup(translateSampletoMouse(tools::file_path_sans_ext(basename(file)))) dat$dp &lt;- as.numeric(as.matrix(vcf.info$DP)) # print(summary(dat$AF)) print(summary(dat$DP)) dat$vartype &lt;- # as.character(as.matrix(vcf.ann$X2)) dat$effect &lt;- # as.character(as.matrix(vcf.ann$X3)) dat$substitution &lt;- # as.character(as.matrix(vcf.ann$X11)) annotate overlay of gene dat$orf_desc &lt;- as.character(as.matrix(apply(dat, 1, getGeneByPosition, gff = gff, pos.column = 2, chr.column = 1))) res[[tools::file_path_sans_ext(basename(file))]] &lt;- dat # add vcf df to list } else { message(&quot;Skipping&quot;) } } df &lt;- as.data.frame(do.call(rbind, res)) # merge list to df return(df) } gff.files &lt;- Sys.glob(&quot;data/references/gff/*.gff&quot;) gff.df &lt;- NULL for (gff.file in gff.files) { message(gff.file) gff &lt;- rtracklayer::readGFF(gff.file) # subset since different columns are present on gff files relevant &lt;- data.frame(start = gff$start, end = gff$end, type = as.character(as.matrix(gff$type)), gene = as.character(as.matrix(gff$gene)), product = as.character(as.matrix(gff$product)), chr = as.character(as.matrix(gff$seqid))) relevant$genome &lt;- substr(basename(gff.file), 1, nchar(basename(gff.file)) - 4) gff.df &lt;- rbind(gff.df, relevant) } ## data/references/gff/I46.gff ## data/references/gff/KB1.gff ## data/references/gff/YL58.gff contig_mapping &lt;- read.csv2(&quot;data/contig_mapping_new_ref.csv&quot;, sep = &quot;;&quot;, header = T, stringsAsFactors = F) # this file contains contig names of the 12 OligoMM genomes vcf.files &lt;- Sys.glob(&quot;reseq/vcf_files/*.vcf&quot;) vcf.samples &lt;- suppressWarnings(vcfToDataframe(vcf.files, contig_mapping, gff.df = gff.df)) ## reseq/vcf_files/DR1.vcf ## reseq/vcf_files/DR10.vcf ## reseq/vcf_files/DR11.vcf ## reseq/vcf_files/DR12.vcf ## reseq/vcf_files/DR13.vcf ## reseq/vcf_files/DR3.vcf ## reseq/vcf_files/DR4.vcf ## reseq/vcf_files/DR6.vcf ## reseq/vcf_files/DR7.vcf ## reseq/vcf_files/DR8.vcf vcf.samples$mouse.id &lt;- as.character(as.matrix(vcf.samples$mouse.id)) vcf.samples[which(vcf.samples$orf_desc == &quot;character(0)&quot;), ]$orf_desc &lt;- &quot;outside ORFs&quot; vcf.samples[which(vcf.samples$orf_desc == &quot;hypothetical protein&quot;), ]$orf_desc &lt;- &quot;hypothetical proteins&quot; saveRDS(vcf.samples, file = &quot;data/rds/reseq.rds&quot;) p &lt;- ggplot(vcf.samples, aes(AF, fill = genome)) + geom_histogram() p &lt;- p + facet_grid(mouse.id + mouse.group ~ genome + genome_hr) p &lt;- p + theme_classic() + xlab(&quot;AF&quot;) + ylab(&quot;occurence&quot;) print(p) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Figure 7.1: AF of resequenced strains p &lt;- ggplot(vcf.samples, aes(majorAF, fill = genome)) + geom_histogram() p &lt;- p + facet_grid(mouse.id + mouse.group ~ genome + genome_hr) p &lt;- p + theme_classic() + xlab(&quot;AF&quot;) + ylab(&quot;occurence&quot;) print(p) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Figure 7.2: major AF of resequenced strains dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) write.table(dat, file = &quot;data/tables/reseq_all.tsv&quot;, sep = &quot;\\t&quot;, row.names = F, quote = F) pairedAFplot &lt;- function(dat = dat, case = &quot;Water&quot;, control = &quot;Ciprofloxacin&quot;) { require(reshape2) require(ggplot2) dat.pair &lt;- dat[which(dat$mouse.group == case | dat$mouse.group == control), ] # dat.pair &lt;- dat.pair[which(dat.pair$genome == genome),] # dat.pair &lt;- dat.pair[which(!is.na(dat.pair$orf_desc)),] data.wide &lt;- dcast(dat.pair, genome + POS + REF + ALT + orf_desc ~ mouse.group, value.var = &quot;AF&quot;) data.wide$vartype &lt;- ifelse(as.character(data.wide$orf_desc) != &quot;outside ORFs&quot;, &quot;coding&quot;, &quot;non-coding&quot;) data.wide &lt;- data.wide[which(data.wide$vartype != 0), ] colnames(data.wide)[6] &lt;- &quot;sample_1&quot; colnames(data.wide)[7] &lt;- &quot;sample_2&quot; data.wide[is.na(data.wide)] &lt;- 0 p &lt;- ggplot(data.wide, aes(x = sample_1, y = sample_2, label = orf_desc, color = genome, shape = vartype)) p &lt;- p + geom_point(fill = NA) + theme_classic() # + scale_color_manual(values = omm_colors) p &lt;- p + theme(aspect.ratio = 1) p &lt;- p + geom_hline(yintercept = 0.5, linetype = 2, color = &quot;grey50&quot;) p &lt;- p + geom_vline(xintercept = 0.5, linetype = 2, color = &quot;grey50&quot;) p &lt;- p + scale_shape_manual(values = orf_shapes) p &lt;- p + theme(aspect.ratio = 1) p &lt;- p + theme(strip.background = element_blank()) p &lt;- p + geom_abline(intercept = 0, slope = 1) p &lt;- p + xlab(case) + ylab(control) p &lt;- p + theme(panel.border = element_rect(colour = &quot;black&quot;, fill = NA, size = 1)) return(p) } suppressWarnings(ggplotly(pairedAFplot(dat, case = &quot;Water&quot;, control = &quot;Ciprofloxacin&quot;))) Figure 7.3: Scatter plot of AF of two samples. Only variants with functional annotation are shown suppressWarnings(ggplotly(pairedAFplot(dat, case = &quot;Water&quot;, control = &quot;Tetracyclin&quot;))) Figure 7.4: Scatter plot of AF of two samples. Only variants with functional annotation are shown suppressWarnings(ggplotly(pairedAFplot(dat, case = &quot;Water&quot;, control = &quot;Vancomycin&quot;))) Figure 7.5: Scatter plot of AF of two samples. Only variants with functional annotation are shown dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) dat$ref_size &lt;- nchar(as.character(as.matrix(dat$REF))) dat$alt_size &lt;- nchar(as.character(as.matrix(dat$ALT))) dat$alteration &lt;- paste(as.character(dat$REF), &quot;-&gt;&quot;, as.character(dat$ALT)) # no grid version for html geneCentricPlot2 &lt;- function(dat = dat, genome = &quot;KB1&quot;, type = &quot;SNP&quot;) { require(reshape2) require(ggplot2) dat.subset &lt;- dat[which(dat$genome == genome), ] if (type == &quot;SNP&quot;) { dat.subset &lt;- dat.subset[which(dat.subset$ref_size == 1 &amp; dat.subset$alt_size == 1), ] } else if (type == &quot;insertion&quot;) { dat.subset &lt;- dat.subset[which(dat.subset$ref_size == 1 &amp; dat.subset$alt_size &gt; 1), ] } else { # deletion dat.subset &lt;- dat.subset[which(dat.subset$ref_size &gt; 1 &amp; dat.subset$alt_size == 1), ] } dat.subset$ID &lt;- paste0(dat.subset$POS, &quot;|&quot;, dat.subset$REF, &quot;-&gt;&quot;, dat.subset$ALT) p &lt;- ggplot(dat.subset, aes(x = orf_desc, y = AF, color = mouse.group, label = alteration)) p &lt;- p + geom_point(size = 2, fill = NA) p &lt;- p + coord_flip() + theme_classic() p &lt;- p + ylim(c(0, 1)) p &lt;- p + theme(strip.background = element_blank()) + theme(strip.text.y = element_text(angle = 0), strip.placement = &quot;outside&quot;) p &lt;- p + xlab(&quot;&quot;) + ylab(&quot;allele frequency&quot;) return(p) } 7.3 KB1 7.3.1 SNP suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;KB1&quot;, type = &quot;SNP&quot;))) Figure 7.6: AF by function of one genome 7.3.2 insertion suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;KB1&quot;, type = &quot;insertion&quot;))) Figure 7.7: AF by function of one genome 7.3.3 deletion suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;KB1&quot;, type = &quot;deletion&quot;))) Figure 7.8: AF by function of one genome 7.4 I46 7.4.1 SNP suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;I46&quot;, type = &quot;SNP&quot;))) Figure 7.9: AF by function of one genome 7.4.2 insertion suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;I46&quot;, type = &quot;insertion&quot;))) Figure 7.10: AF by function of one genome 7.4.3 deletion suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;I46&quot;, type = &quot;deletion&quot;))) Figure 7.11: AF by function of one genome 7.5 YL58 7.5.1 SNP suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;YL58&quot;, type = &quot;SNP&quot;))) Figure 7.12: AF by function of one genome 7.5.2 insertion suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;YL58&quot;, type = &quot;insertion&quot;))) Figure 7.13: AF by function of one genome 7.5.3 deletion suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;YL58&quot;, type = &quot;deletion&quot;))) Figure 7.14: AF by function of one genome 7.6 mutation bias? 7.6.1 SNP dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) dat$ref_size &lt;- nchar(as.character(as.matrix(dat$REF))) dat$alt_size &lt;- nchar(as.character(as.matrix(dat$ALT))) dat &lt;- dat[which(dat$ref_size == 1 &amp; dat$alt_size == 1), ] dat$alteration &lt;- paste(as.character(dat$REF), &quot;-&gt;&quot;, as.character(dat$ALT)) dat$dummy &lt;- 1 dat.agg &lt;- aggregate(dummy ~ genome + mouse.group + alteration, dat, sum) p &lt;- ggplot(dat.agg, aes(x = mouse.group, y = dummy, label = alteration, color = genome)) p &lt;- p + geom_text() + facet_grid(~genome) + ylab(&quot;occurrence&quot;) p &lt;- p + stat_summary(fun.y = mean, geom = &quot;line&quot;, aes(group = alteration), alpha = 0.1) p &lt;- p + theme_classic() # + scale_color_manual(values = omm_colors) ggplotly(p) 7.6.2 insertions dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) dat$ref_size &lt;- nchar(as.character(as.matrix(dat$REF))) dat$alt_size &lt;- nchar(as.character(as.matrix(dat$ALT))) dat &lt;- dat[which(dat$alt_size &gt; dat$ref_size), ] dat$alteration &lt;- paste(as.character(dat$REF), &quot;-&gt;&quot;, as.character(dat$ALT)) dat$dummy &lt;- 1 dat.agg &lt;- aggregate(dummy ~ genome + mouse.group + alteration, dat, sum) p &lt;- ggplot(dat.agg, aes(x = mouse.group, y = dummy, label = alteration, color = genome)) p &lt;- p + geom_text() + facet_grid(~genome) + ylab(&quot;occurrence&quot;) p &lt;- p + stat_summary(fun.y = mean, geom = &quot;line&quot;, aes(group = alteration), alpha = 0.1) p &lt;- p + theme_classic() # + scale_color_manual(values = omm_colors) ggplotly(p) 7.6.3 deletions dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) dat$ref_size &lt;- nchar(as.character(as.matrix(dat$REF))) dat$alt_size &lt;- nchar(as.character(as.matrix(dat$ALT))) dat &lt;- dat[which(dat$alt_size &lt; dat$ref_size), ] dat$alteration &lt;- paste(as.character(dat$REF), &quot;-&gt;&quot;, as.character(dat$ALT)) dat$dummy &lt;- 1 dat.agg &lt;- aggregate(dummy ~ genome + mouse.group + alteration, dat, sum) p &lt;- ggplot(dat.agg, aes(x = mouse.group, y = dummy, label = alteration, color = genome)) p &lt;- p + geom_text() + facet_grid(~genome) + ylab(&quot;occurrence&quot;) p &lt;- p + stat_summary(fun.y = mean, geom = &quot;line&quot;, aes(group = alteration), alpha = 0.1) p &lt;- p + theme_classic() # + scale_color_manual(values = omm_colors) ggplotly(p) 7.7 heatmap 7.7.1 KB1 dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) # dat &lt;- dat[which(dat$mouse.group == &#39;Water&#39; | dat$mouse.group == &#39;Tetracyclin&#39; # ),] data.wide &lt;- dcast(dat, genome + POS + REF + ALT + orf_desc ~ mouse.group, value.var = &quot;AF&quot;) data.wide &lt;- data.wide[which(data.wide$genome == &quot;KB1&quot;), ] rownames(data.wide) &lt;- paste0(data.wide$POS, &quot;-&quot;, data.wide$REF, &quot;-&quot;, data.wide$ALT) heat &lt;- data.matrix(data.wide[, 6:9]) library(circlize) library(ComplexHeatmap) heat[is.na(heat)] &lt;- 0 col_fun = colorRamp2(c(0, 0.5, 1), c(&quot;white&quot;, &quot;yellow&quot;, &quot;red&quot;)) Heatmap(heat, name = &quot;AF&quot;, col = col_fun, column_names_gp = gpar(fontsize = 9), row_names_gp = gpar(fontsize = 3), show_row_dend = F, show_row_names = F, show_column_dend = F) 7.7.2 I46 dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) # dat &lt;- dat[which(dat$mouse.group == &#39;Water&#39; | dat$mouse.group == &#39;Tetracyclin&#39; # ),] data.wide &lt;- dcast(dat, genome + POS + REF + ALT + orf_desc ~ mouse.group, value.var = &quot;AF&quot;) data.wide &lt;- data.wide[which(data.wide$genome == &quot;I46&quot;), ] rownames(data.wide) &lt;- paste0(data.wide$POS, &quot;-&quot;, data.wide$REF, &quot;-&quot;, data.wide$ALT) heat &lt;- data.matrix(data.wide[, 6:9]) library(circlize) library(ComplexHeatmap) heat[is.na(heat)] &lt;- 0 col_fun = colorRamp2(c(0, 0.5, 1), c(&quot;white&quot;, &quot;yellow&quot;, &quot;red&quot;)) Heatmap(heat, name = &quot;AF&quot;, col = col_fun, column_names_gp = gpar(fontsize = 9), row_names_gp = gpar(fontsize = 3), show_row_names = F, show_row_dend = F, show_column_dend = F) 7.7.3 YL58 dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) # dat &lt;- dat[which(dat$mouse.group == &#39;Water&#39; | dat$mouse.group == &#39;Tetracyclin&#39; # ),] data.wide &lt;- dcast(dat, genome + POS + REF + ALT + orf_desc ~ mouse.group, value.var = &quot;AF&quot;) data.wide &lt;- data.wide[which(data.wide$genome == &quot;YL58&quot;), ] rownames(data.wide) &lt;- paste0(data.wide$POS, &quot;-&quot;, data.wide$REF, &quot;-&quot;, data.wide$ALT) heat &lt;- data.matrix(data.wide[, 6:9]) library(circlize) library(ComplexHeatmap) heat[is.na(heat)] &lt;- 0 col_fun = colorRamp2(c(0, 0.5, 1), c(&quot;white&quot;, &quot;yellow&quot;, &quot;red&quot;)) Heatmap(heat, name = &quot;AF&quot;, col = col_fun, column_names_gp = gpar(fontsize = 9), row_names_gp = gpar(fontsize = 3), show_row_dend = F, show_row_names = F, show_column_dend = F) 7.7.4 Filter: present in all 7.7.5 KB1 dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) # dat &lt;- dat[which(dat$mouse.group == &#39;Water&#39; | dat$mouse.group == &#39;Tetracyclin&#39; # ),] data.wide &lt;- dcast(dat, genome + POS + REF + ALT + orf_desc ~ mouse.group, value.var = &quot;AF&quot;) data.wide &lt;- data.wide[which(data.wide$genome == &quot;KB1&quot;), ] rownames(data.wide) &lt;- paste0(data.wide$POS, &quot; (&quot;, data.wide$REF, &quot; -&gt; &quot;, data.wide$ALT, &quot;) &quot;, data.wide$orf_desc) heat &lt;- data.matrix(data.wide[, 6:9]) heat &lt;- heat[which(rowSums(!is.na(heat)) &gt; 2), ] # filter uncommon library(circlize) library(ComplexHeatmap) heat[is.na(heat)] &lt;- 0 col_fun = colorRamp2(c(0, 0.5, 1), c(&quot;white&quot;, &quot;yellow&quot;, &quot;red&quot;)) Heatmap(heat, name = &quot;AF&quot;, col = col_fun, column_names_gp = gpar(fontsize = 9), row_names_gp = gpar(fontsize = 5), show_row_dend = F, show_row_names = T, show_column_dend = F) 7.7.6 YL58 dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) # dat &lt;- dat[which(dat$mouse.group == &#39;Water&#39; | dat$mouse.group == &#39;Tetracyclin&#39; # ),] data.wide &lt;- dcast(dat, genome + POS + REF + ALT + orf_desc ~ mouse.group, value.var = &quot;AF&quot;) data.wide &lt;- data.wide[which(data.wide$genome == &quot;YL58&quot;), ] rownames(data.wide) &lt;- paste0(data.wide$POS, &quot; (&quot;, data.wide$REF, &quot; -&gt; &quot;, data.wide$ALT, &quot;) &quot;, data.wide$orf_desc) heat &lt;- data.matrix(data.wide[, 6:9]) heat &lt;- heat[which(rowSums(!is.na(heat)) &gt; 2), ] # filter uncommon library(circlize) library(ComplexHeatmap) heat[is.na(heat)] &lt;- 0 col_fun = colorRamp2(c(0, 0.5, 1), c(&quot;white&quot;, &quot;yellow&quot;, &quot;red&quot;)) Heatmap(heat, name = &quot;AF&quot;, col = col_fun, column_names_gp = gpar(fontsize = 9), row_names_gp = gpar(fontsize = 5), show_row_dend = F, show_row_names = T, show_column_dend = F) 7.7.7 I46 dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) # dat &lt;- dat[which(dat$mouse.group == &#39;Water&#39; | dat$mouse.group == &#39;Tetracyclin&#39; # ),] data.wide &lt;- dcast(dat, genome + POS + REF + ALT + orf_desc ~ mouse.group, value.var = &quot;AF&quot;) data.wide &lt;- data.wide[which(data.wide$genome == &quot;I46&quot;), ] rownames(data.wide) &lt;- paste0(data.wide$POS, &quot; (&quot;, data.wide$REF, &quot; -&gt; &quot;, data.wide$ALT, &quot;) &quot;, data.wide$orf_desc) heat &lt;- data.matrix(data.wide[, 6:9]) heat &lt;- heat[which(rowSums(!is.na(heat)) &gt; 2), ] # filter uncommon library(circlize) library(ComplexHeatmap) heat[is.na(heat)] &lt;- 0 col_fun = colorRamp2(c(0, 0.5, 1), c(&quot;white&quot;, &quot;yellow&quot;, &quot;red&quot;)) Heatmap(heat, name = &quot;AF&quot;, col = col_fun, column_names_gp = gpar(fontsize = 9), row_names_gp = gpar(fontsize = 5), show_row_dend = F, show_row_names = T, show_column_dend = F) 7.7.8 Filter: not in water but in AB 7.7.9 KB1 dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) # dat &lt;- dat[which(dat$mouse.group == &#39;Water&#39; | dat$mouse.group == &#39;Tetracyclin&#39; # ),] data.wide &lt;- dcast(dat, genome + POS + REF + ALT + orf_desc ~ mouse.group, value.var = &quot;AF&quot;) data.wide &lt;- data.wide[which(data.wide$genome == &quot;KB1&quot;), ] rownames(data.wide) &lt;- paste0(data.wide$POS, &quot; (&quot;, data.wide$REF, &quot; -&gt; &quot;, data.wide$ALT, &quot;) &quot;, data.wide$orf_desc) heat &lt;- data.wide[, 6:9] heat[is.na(heat)] &lt;- 0 heat &lt;- heat[which(heat$Water &lt; 0.5 &amp; (heat$Ciprofloxacin &gt; 0.5 | heat$Tetracyclin &gt; 0.5 | heat$Vancomycin &gt; 0.5)), ] # filter water heat &lt;- data.matrix(heat) library(circlize) library(ComplexHeatmap) heat[is.na(heat)] &lt;- 0 col_fun = colorRamp2(c(0, 0.5, 1), c(&quot;white&quot;, &quot;yellow&quot;, &quot;red&quot;)) Heatmap(heat, name = &quot;AF&quot;, col = col_fun, column_names_gp = gpar(fontsize = 9), row_names_gp = gpar(fontsize = 5), show_row_dend = F, show_row_names = T, show_column_dend = F) 7.7.10 YL58 dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) # dat &lt;- dat[which(dat$mouse.group == &#39;Water&#39; | dat$mouse.group == &#39;Tetracyclin&#39; # ),] data.wide &lt;- dcast(dat, genome + POS + REF + ALT + orf_desc ~ mouse.group, value.var = &quot;AF&quot;) data.wide &lt;- data.wide[which(data.wide$genome == &quot;YL58&quot;), ] rownames(data.wide) &lt;- paste0(data.wide$POS, &quot; (&quot;, data.wide$REF, &quot; -&gt; &quot;, data.wide$ALT, &quot;) &quot;, data.wide$orf_desc) heat &lt;- data.wide[, 6:9] heat[is.na(heat)] &lt;- 0 heat &lt;- heat[which(heat$Water &lt; 0.5 &amp; (heat$Ciprofloxacin &gt; 0.5 | heat$Tetracyclin &gt; 0.5 | heat$Vancomycin &gt; 0.5)), ] # filter water heat &lt;- data.matrix(heat) library(circlize) library(ComplexHeatmap) heat[is.na(heat)] &lt;- 0 col_fun = colorRamp2(c(0, 0.5, 1), c(&quot;white&quot;, &quot;yellow&quot;, &quot;red&quot;)) Heatmap(heat, name = &quot;AF&quot;, col = col_fun, column_names_gp = gpar(fontsize = 9), row_names_gp = gpar(fontsize = 5), show_row_dend = F, show_row_names = T, show_column_dend = F) 7.7.11 I46 dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) # dat &lt;- dat[which(dat$mouse.group == &#39;Water&#39; | dat$mouse.group == &#39;Tetracyclin&#39; # ),] data.wide &lt;- dcast(dat, genome + POS + REF + ALT + orf_desc ~ mouse.group, value.var = &quot;AF&quot;) data.wide &lt;- data.wide[which(data.wide$genome == &quot;I46&quot;), ] rownames(data.wide) &lt;- paste0(data.wide$POS, &quot; (&quot;, data.wide$REF, &quot; -&gt; &quot;, data.wide$ALT, &quot;) &quot;, data.wide$orf_desc) heat &lt;- data.wide[, 6:9] heat[is.na(heat)] &lt;- 0 heat &lt;- heat[which(heat$Water &lt; 0.5 &amp; (heat$Ciprofloxacin &gt; 0.5 | heat$Tetracyclin &gt; 0.5 | heat$Vancomycin &gt; 0.5)), ] # filter water heat &lt;- data.matrix(heat) library(circlize) library(ComplexHeatmap) heat[is.na(heat)] &lt;- 0 col_fun = colorRamp2(c(0, 0.5, 1), c(&quot;white&quot;, &quot;yellow&quot;, &quot;red&quot;)) Heatmap(heat, name = &quot;AF&quot;, col = col_fun, column_names_gp = gpar(fontsize = 9), row_names_gp = gpar(fontsize = 5), show_row_dend = F, show_row_names = T, show_column_dend = F) "]
]
