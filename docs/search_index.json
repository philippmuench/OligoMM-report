[
["ab-effects-resequenced.html", "Section 3 AB-effects (resequenced) 3.1 Metadata 3.2 Process Lofeq vcf files 3.3 Plot AF frequency 3.4 KB1 3.5 I46 3.6 YL58 3.7 mutation bias? 3.8 heatmap 3.9 Filter: present in all", " Section 3 AB-effects (resequenced) 3.1 Metadata Sample Genome Group Species Treatment DR4 KB1 1687 Enterococcus_faecalis Ciprofloxacin DR1 KB1 1681 Enterococcus_faecalis Water DR8 KB1 1691 Enterococcus_faecalis Tetracyclin DR11 KB1 1696 Enterococcus_faecalis Vancomycin DR3 I46 1681 Clostridium_innocuum Water DR6 I46 1687 Clostridium_innocuum Ciprofloxacin DR10 I46 1691 Clostridium_innocuum Tetracyclin DR12 I46 1696 Clostridium_innocuum Vancomycin DR7 YL58 1687 Blautia_coccoides Ciprofloxacin DR13 YL58 1696 Blautia_coccoides Vancomycin 3.2 Process Lofeq vcf files source(&quot;utils.R&quot;) orf_shapes = c(&quot;coding&quot; = 15, &quot;non-coding&quot; = 3) vcfToDataframe &lt;- function(vcf.files, contig_mapping = contig_mapping, gff.df = gff.df) { require(vcfR) res &lt;- list() for (file in vcf.files) { #message(file) library(data.table) vcf.content &lt;- vcfR::read.vcfR(file, verbose = FALSE) vcf.fix &lt;- as.data.frame(vcf.content@fix) # contains chr, position and substitution informations vcf.info &lt;- vcfR::INFO2df(vcf.content) # get INFO field, contains DP, AF informations # no annotation since they are not yet processed with snpEff # vcf.ann &lt;- data.frame(do.call(&#39;rbind&#39;, strsplit(as.character(vcf.info$ANN),&#39;|&#39;,fixed = TRUE))) # split ANN field, contains information if files are processed by snpEff if(nrow(vcf.fix) &gt; 0) { # there are variants dat &lt;- as.data.frame(cbind(vcf.fix[,c(1, 2, 4, 5, 6)], vcf.info[,c(1, 2)])) dat$majorAF &lt;- sapply(dat$AF, minorAfToMajorAf) # transforms e.g. AF of 0.1 to 0.9, 0.9 stays 0.9 and 0.5 stays 0.5 dat$genome &lt;- contig_mapping[match(dat$CHROM, contig_mapping$contig),]$genome # map chr information to genome name e.g. NHMU01000001.1 -&gt; i48 dat$genome_hr &lt;- translateGenomeIdToFullName(tolower(dat$genome)) dat$mouse.id &lt;- translateSampletoMouse(tools::file_path_sans_ext(basename(file))) dat$mouse.group &lt;- translateMouseIdToTreatmentGroup(translateSampletoMouse(tools::file_path_sans_ext(basename(file)))) dat$dp &lt;- as.numeric(as.matrix(vcf.info$DP)) dt.gff &lt;- data.table(start = gff.df$start, end = gff.df$end, chr = as.character(as.matrix(gff.df$chr)), feature = gff.df$product) colnames(dat)[1:2] &lt;- c(&quot;chr&quot;, &quot;start&quot;) dat$start &lt;- as.integer(as.matrix(dat$start)) dat$chr &lt;- as.character(as.matrix(dat$chr)) dat$end &lt;- dat$start dat2 &lt;- as.data.table(dat) setkey(dt.gff, chr, start, end) annotated &lt;- foverlaps(dat2, dt.gff, type=&quot;within&quot;, mult=&quot;first&quot;) res[[tools::file_path_sans_ext(basename(file))]] &lt;- annotated # add vcf df to list } else{ message(&quot;Skipping&quot;) } } df &lt;- as.data.frame(do.call(rbind, res)) # merge list to df return(df) } gff.files &lt;- Sys.glob(&quot;data/references/gff/*.gff&quot;) gff.df &lt;- NULL for (gff.file in gff.files){ message(gff.file) gff &lt;- rtracklayer::readGFF(gff.file) # subset since different columns are present on gff files relevant &lt;- data.frame(start = gff$start, end = gff$end, type = as.character(as.matrix(gff$type)), gene = as.character(as.matrix(gff$gene)), product = as.character(as.matrix(gff$product)), chr = as.character(as.matrix(gff$seqid))) relevant$genome &lt;- substr(basename(gff.file), 1, nchar(basename(gff.file))-4) gff.df &lt;- rbind(gff.df, relevant) } ## data/references/gff/I46.gff ## data/references/gff/KB1.gff ## data/references/gff/YL58.gff contig_mapping &lt;- read.csv2(&quot;data/contig_mapping_new_ref.csv&quot;, sep =&quot;;&quot;, header=T, stringsAsFactors = F) # this file contains contig names of the 12 OligoMM genomes vcf.files &lt;- Sys.glob(&quot;out_reseq/all_vcf/*.vcf&quot;) vcf.samples &lt;- suppressWarnings(vcfToDataframe(vcf.files, contig_mapping, gff.df = gff.df)) vcf.samples$feature &lt;- as.character(as.matrix(vcf.samples$feature)) vcf.samples[which(is.na(vcf.samples$feature)),]$feature &lt;- &quot;outside ORFs&quot; vcf.samples[which(vcf.samples$feature == &quot;hypothetical protein&quot;),]$feature &lt;- &quot;hypothetical proteins&quot; vcf.samples $start &lt;- NULL vcf.samples $end &lt;- NULL vcf.samples $i.end &lt;- NULL colnames(vcf.samples)[3] &lt;- &quot;POS&quot; saveRDS(vcf.samples, file = &quot;data/rds/reseq.rds&quot;) dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) write.table(dat, file = &quot;data/tables/reseq_all.tsv&quot;, sep = &quot;\\t&quot;, row.names = F, quote = F) 3.3 Plot AF frequency dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) p1 &lt;- ggplot(dat, aes(AF, fill = genome)) + geom_histogram() p1 &lt;- p1 + facet_grid(mouse.id + mouse.group ~ genome + genome_hr) p1 &lt;- p1 + theme_minimal() + xlab(&quot;AF&quot;) + ylab(&quot;occurence&quot;) plotly::ggplotly(p1) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Figure 3.1: AF of resequenced strains p &lt;- ggplot(dat, aes(majorAF, fill = genome)) + geom_histogram() p &lt;- p + facet_grid(mouse.id + mouse.group ~ genome + genome_hr) p &lt;- p + theme_minimal() + xlab(&quot;AF&quot;) + ylab(&quot;occurence&quot;) plotly::ggplotly(p) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Figure 3.2: major AF of resequenced strains pairedAFplot &lt;- function(dat = dat, case = &quot;Water&quot;, control = &quot;Ciprofloxacin&quot;){ require(reshape2) require(ggplot2) dat.pair &lt;- dat[which(dat$mouse.group == case | dat$mouse.group == control),] #dat.pair &lt;- dat.pair[which(dat.pair$genome == genome),] #dat.pair &lt;- dat.pair[which(!is.na(dat.pair$feature)),] data.wide &lt;- dcast(dat.pair, genome + POS + REF + ALT + feature ~ mouse.group, value.var = &quot;AF&quot;) data.wide$vartype &lt;- ifelse(as.character(data.wide$feature) != &quot;outside ORFs&quot;, &quot;coding&quot;, &quot;non-coding&quot;) data.wide &lt;- data.wide[which(data.wide$vartype != 0),] colnames(data.wide)[6] &lt;- &quot;sample_1&quot; colnames(data.wide)[7] &lt;- &quot;sample_2&quot; data.wide[is.na(data.wide)] &lt;- 0 p &lt;- ggplot(data.wide, aes(x = sample_1, y =sample_2, label = feature, color = genome, shape =vartype)) p &lt;- p + geom_point(fill = NA) + theme_classic()# + scale_color_manual(values = omm_colors) p &lt;- p + theme(aspect.ratio = 1) p &lt;- p + geom_hline(yintercept = .5, linetype = 2, color = &quot;grey50&quot;) p &lt;- p + geom_vline(xintercept = .5, linetype = 2, color = &quot;grey50&quot;) p &lt;- p + scale_shape_manual(values = orf_shapes) p &lt;- p + theme(aspect.ratio = 1) p &lt;- p + theme(strip.background = element_blank()) p &lt;- p + geom_abline(intercept = 0, slope = 1) p &lt;- p + xlab(case) + ylab(control) p &lt;- p + theme(panel.border = element_rect(colour = &quot;black&quot;, fill=NA, size=1)) return(p) } suppressWarnings(ggplotly(pairedAFplot(dat, case = &quot;Water&quot;, control = &quot;Ciprofloxacin&quot;))) Figure 3.3: Scatter plot of AF of two samples. Only variants with functional annotation are shown suppressWarnings(ggplotly(pairedAFplot(dat, case = &quot;Water&quot;, control = &quot;Tetracyclin&quot;))) Figure 3.4: Scatter plot of AF of two samples. Only variants with functional annotation are shown suppressWarnings(ggplotly(pairedAFplot(dat, case = &quot;Water&quot;, control = &quot;Vancomycin&quot;))) Figure 3.5: Scatter plot of AF of two samples. Only variants with functional annotation are shown dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) dat$ref_size &lt;- nchar(as.character(as.matrix(dat$REF))) dat$alt_size &lt;- nchar(as.character(as.matrix(dat$ALT))) dat$alteration &lt;- paste(as.character(dat$REF), &quot;-&gt;&quot;,as.character(dat$ALT)) # no grid version for html geneCentricPlot2 &lt;- function(dat = dat, genome = &quot;KB1&quot;, type = &quot;SNP&quot;) { require(reshape2) require(ggplot2) dat.subset &lt;- dat[which(dat$genome == genome), ] if(type == &quot;SNP&quot;){ dat.subset &lt;- dat.subset[which(dat.subset$ref_size == 1 &amp; dat.subset$alt_size == 1 ),] } else if (type == &quot;insertion&quot;) { dat.subset &lt;- dat.subset[which(dat.subset$ref_size == 1 &amp; dat.subset$alt_size &gt; 1 ),] } else { # deletion dat.subset &lt;- dat.subset[which(dat.subset$ref_size &gt; 1 &amp; dat.subset$alt_size == 1 ),] } dat.subset$ID &lt;- paste0(dat.subset$POS, &quot;|&quot;, dat.subset$REF, &quot;-&gt;&quot;, dat.subset$ALT) p &lt;- ggplot(dat.subset, aes(x = feature, y = AF, color = mouse.group, label= alteration)) p &lt;- p + geom_point(size = 2, fill = NA) p &lt;- p + coord_flip() + theme_classic() p &lt;- p + ylim(c(0, 1)) p &lt;- p + theme(strip.background = element_blank()) + theme(strip.text.y = element_text(angle = 0), strip.placement = &quot;outside&quot;) p &lt;- p + xlab(&quot;&quot;) + ylab(&quot;allele frequency&quot;) return(p) } 3.4 KB1 3.4.1 SNP suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;KB1&quot;, type = &quot;SNP&quot;))) Figure 3.6: AF by function of one genome 3.4.2 insertion suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;KB1&quot;, type = &quot;insertion&quot;))) Figure 3.7: AF by function of one genome 3.4.3 deletion suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;KB1&quot;, type = &quot;deletion&quot;))) Figure 3.8: AF by function of one genome 3.5 I46 3.5.1 SNP suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;I46&quot;, type = &quot;SNP&quot;))) Figure 3.9: AF by function of one genome 3.5.2 insertion suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;I46&quot;, type = &quot;insertion&quot;))) Figure 3.10: AF by function of one genome 3.5.3 deletion suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;I46&quot;, type = &quot;deletion&quot;))) Figure 3.11: AF by function of one genome 3.6 YL58 3.6.1 SNP suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;YL58&quot;, type = &quot;SNP&quot;))) Figure 3.12: AF by function of one genome 3.6.2 insertion suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;YL58&quot;, type = &quot;insertion&quot;))) Figure 3.13: AF by function of one genome 3.6.3 deletion suppressWarnings(ggplotly(geneCentricPlot2(dat, genome = &quot;YL58&quot;, type = &quot;deletion&quot;))) Figure 3.14: AF by function of one genome 3.7 mutation bias? 3.7.1 SNP dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) dat$ref_size &lt;- nchar(as.character(as.matrix(dat$REF))) dat$alt_size &lt;- nchar(as.character(as.matrix(dat$ALT))) dat &lt;- dat[which(dat$ref_size == 1 &amp; dat$alt_size == 1 ),] dat$alteration &lt;- paste(as.character(dat$REF), &quot;-&gt;&quot;,as.character(dat$ALT)) dat$dummy &lt;- 1 dat.agg &lt;- aggregate(dummy ~ genome + mouse.group + alteration , dat, sum) p &lt;- ggplot(dat.agg, aes(x = mouse.group, y = dummy, label = alteration, color = genome)) p &lt;- p + geom_text() + facet_grid(~genome) + ylab(&quot;occurrence&quot;) p &lt;- p + stat_summary(fun.y=mean, geom=&quot;line&quot;, aes(group=alteration), alpha = 0.1) ## Warning: `fun.y` is deprecated. Use `fun` instead. p &lt;- p + theme_classic()# + scale_color_manual(values = omm_colors) ggplotly(p) 3.7.2 insertions dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) dat$ref_size &lt;- nchar(as.character(as.matrix(dat$REF))) dat$alt_size &lt;- nchar(as.character(as.matrix(dat$ALT))) dat &lt;- dat[which(dat$alt_size &gt; dat$ref_size),] dat$alteration &lt;- paste(as.character(dat$REF), &quot;-&gt;&quot;,as.character(dat$ALT)) dat$dummy &lt;- 1 dat.agg &lt;- aggregate(dummy ~ genome + mouse.group + alteration , dat, sum) p &lt;- ggplot(dat.agg, aes(x = mouse.group, y = dummy, label = alteration, color = genome)) p &lt;- p + geom_text() + facet_grid(~genome) + ylab(&quot;occurrence&quot;) p &lt;- p + stat_summary(fun.y=mean, geom=&quot;line&quot;, aes(group=alteration), alpha = 0.1) ## Warning: `fun.y` is deprecated. Use `fun` instead. p &lt;- p + theme_classic()# + scale_color_manual(values = omm_colors) ggplotly(p) 3.7.3 deletions dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) dat$ref_size &lt;- nchar(as.character(as.matrix(dat$REF))) dat$alt_size &lt;- nchar(as.character(as.matrix(dat$ALT))) dat &lt;- dat[which(dat$alt_size &lt; dat$ref_size ),] dat$alteration &lt;- paste(as.character(dat$REF), &quot;-&gt;&quot;,as.character(dat$ALT)) dat$dummy &lt;- 1 dat.agg &lt;- aggregate(dummy ~ genome + mouse.group + alteration , dat, sum) p &lt;- ggplot(dat.agg, aes(x = mouse.group, y = dummy, label = alteration, color = genome)) p &lt;- p + geom_text() + facet_grid(~genome) + ylab(&quot;occurrence&quot;) p &lt;- p + stat_summary(fun.y=mean, geom=&quot;line&quot;, aes(group=alteration), alpha = 0.1) ## Warning: `fun.y` is deprecated. Use `fun` instead. p &lt;- p + theme_classic()# + scale_color_manual(values = omm_colors) ggplotly(p) 3.8 heatmap 3.8.1 KB1 dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) #dat &lt;- dat[which(dat$mouse.group == &quot;Water&quot; | dat$mouse.group == &quot;Tetracyclin&quot; ),] data.wide &lt;- dcast(dat, genome + POS + REF + ALT + feature ~ mouse.group, value.var = &quot;AF&quot;) ## Warning in dcast(dat, genome + POS + REF + ALT + feature ~ mouse.group, : The ## dcast generic in data.table has been passed a data.frame and will attempt to ## redirect to the reshape2::dcast; please note that reshape2 is deprecated, and ## this redirection is now deprecated as well. Please do this redirection yourself ## like reshape2::dcast(dat). In the next version, this warning will become an ## error. data.wide &lt;- data.wide[which(data.wide$genome == &quot;KB1&quot;),] rownames(data.wide) &lt;- paste0(data.wide$POS, &quot;-&quot;,data.wide$REF, &quot;-&quot;,data.wide$ALT) heat &lt;- data.matrix(data.wide[,6:9]) library(circlize) library(ComplexHeatmap) heat[is.na(heat)] &lt;- 0 col_fun = colorRamp2(c(0, 0.5, 1), c(&quot;white&quot;, &quot;yellow&quot;, &quot;red&quot;)) Heatmap(heat, name = &quot;AF&quot;, col = col_fun, column_names_gp = gpar(fontsize =9), row_names_gp = gpar(fontsize = 3), show_row_dend = F, show_row_names = F, show_column_dend = F) 3.8.2 I46 dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) #dat &lt;- dat[which(dat$mouse.group == &quot;Water&quot; | dat$mouse.group == &quot;Tetracyclin&quot; ),] data.wide &lt;- dcast(dat, genome + POS + REF + ALT + feature ~ mouse.group, value.var = &quot;AF&quot;) ## Warning in dcast(dat, genome + POS + REF + ALT + feature ~ mouse.group, : The ## dcast generic in data.table has been passed a data.frame and will attempt to ## redirect to the reshape2::dcast; please note that reshape2 is deprecated, and ## this redirection is now deprecated as well. Please do this redirection yourself ## like reshape2::dcast(dat). In the next version, this warning will become an ## error. data.wide &lt;- data.wide[which(data.wide$genome == &quot;I46&quot;),] rownames(data.wide) &lt;- paste0(data.wide$POS, &quot;-&quot;,data.wide$REF, &quot;-&quot;,data.wide$ALT) heat &lt;- data.matrix(data.wide[,6:9]) library(circlize) library(ComplexHeatmap) heat[is.na(heat)] &lt;- 0 col_fun = colorRamp2(c(0, 0.5, 1), c(&quot;white&quot;, &quot;yellow&quot;, &quot;red&quot;)) Heatmap(heat, name = &quot;AF&quot;, col = col_fun, column_names_gp = gpar(fontsize = 9), row_names_gp = gpar(fontsize = 9), show_row_names = F, show_row_dend = F, show_column_dend = F ) 3.8.3 YL58 dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) #dat &lt;- dat[which(dat$mouse.group == &quot;Water&quot; | dat$mouse.group == &quot;Tetracyclin&quot; ),] data.wide &lt;- dcast(dat, genome + POS + REF + ALT + feature ~ mouse.group, value.var = &quot;AF&quot;) ## Warning in dcast(dat, genome + POS + REF + ALT + feature ~ mouse.group, : The ## dcast generic in data.table has been passed a data.frame and will attempt to ## redirect to the reshape2::dcast; please note that reshape2 is deprecated, and ## this redirection is now deprecated as well. Please do this redirection yourself ## like reshape2::dcast(dat). In the next version, this warning will become an ## error. data.wide &lt;- data.wide[which(data.wide$genome == &quot;YL58&quot;),] rownames(data.wide) &lt;- paste0(data.wide$POS, &quot;-&quot;,data.wide$REF, &quot;-&quot;,data.wide$ALT) heat &lt;- data.matrix(data.wide[,6:9]) library(circlize) library(ComplexHeatmap) heat[is.na(heat)] &lt;- 0 col_fun = colorRamp2(c(0, 0.5, 1), c(&quot;white&quot;, &quot;yellow&quot;, &quot;red&quot;)) Heatmap(heat, name = &quot;AF&quot;, col = col_fun, column_names_gp = gpar(fontsize = 9), row_names_gp = gpar(fontsize = 9), show_row_dend = F, show_row_names = F, show_column_dend = F ) 3.9 Filter: present in all 3.9.1 KB1 (Enterococcusfaecalis) dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) #dat &lt;- dat[which(dat$mouse.group == &quot;Water&quot; | dat$mouse.group == &quot;Tetracyclin&quot; ),] data.wide &lt;- dcast(dat, genome + POS + REF + ALT + feature ~ mouse.group, value.var = &quot;AF&quot;) ## Warning in dcast(dat, genome + POS + REF + ALT + feature ~ mouse.group, : The ## dcast generic in data.table has been passed a data.frame and will attempt to ## redirect to the reshape2::dcast; please note that reshape2 is deprecated, and ## this redirection is now deprecated as well. Please do this redirection yourself ## like reshape2::dcast(dat). In the next version, this warning will become an ## error. data.wide &lt;- data.wide[which(data.wide$genome == &quot;KB1&quot;),] rownames(data.wide) &lt;- paste0(data.wide$POS, &quot; (&quot;,data.wide$REF, &quot; -&gt; &quot;,data.wide$ALT, &quot;) &quot;, data.wide$feature) heat &lt;- data.matrix(data.wide[,6:9]) heat &lt;- heat[which(rowSums(!is.na(heat))&gt; 2),] # filter uncommon library(circlize) library(ComplexHeatmap) heat[is.na(heat)] &lt;- 0 col_fun = colorRamp2(c(0, 0.5, 1), c(&quot;white&quot;, &quot;yellow&quot;, &quot;red&quot;)) Heatmap(heat, name = &quot;AF&quot;, col = col_fun, column_names_gp = gpar(fontsize = 9), row_names_gp = gpar(fontsize = 9), show_row_dend = F, row_names_max_width = unit(10, &quot;cm&quot;), show_row_names = T, show_column_dend = F ) 3.9.2 YL58 (Blautia_coccoides) dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) #dat &lt;- dat[which(dat$mouse.group == &quot;Water&quot; | dat$mouse.group == &quot;Tetracyclin&quot; ),] data.wide &lt;- dcast(dat, genome + POS + REF + ALT + feature ~ mouse.group, value.var = &quot;AF&quot;) ## Warning in dcast(dat, genome + POS + REF + ALT + feature ~ mouse.group, : The ## dcast generic in data.table has been passed a data.frame and will attempt to ## redirect to the reshape2::dcast; please note that reshape2 is deprecated, and ## this redirection is now deprecated as well. Please do this redirection yourself ## like reshape2::dcast(dat). In the next version, this warning will become an ## error. data.wide &lt;- data.wide[which(data.wide$genome == &quot;YL58&quot;),] rownames(data.wide) &lt;- paste0(data.wide$POS, &quot; (&quot;,data.wide$REF, &quot; -&gt; &quot;,data.wide$ALT, &quot;) &quot;, data.wide$feature) heat &lt;- data.matrix(data.wide[,6:9]) heat &lt;- heat[which(rowSums(!is.na(heat))&gt; 2),] # filter uncommon library(circlize) library(ComplexHeatmap) heat[is.na(heat)] &lt;- 0 col_fun = colorRamp2(c(0, 0.5, 1), c(&quot;white&quot;, &quot;yellow&quot;, &quot;red&quot;)) Heatmap(heat, name = &quot;AF&quot;, col = col_fun, row_names_max_width = unit(10, &quot;cm&quot;), column_names_gp = gpar(fontsize = 9), row_names_gp = gpar(fontsize =9), show_row_dend = F, show_row_names = T, show_column_dend = F ) 3.9.3 I46 (Clostridium innocuum) dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) #dat &lt;- dat[which(dat$mouse.group == &quot;Water&quot; | dat$mouse.group == &quot;Tetracyclin&quot; ),] data.wide &lt;- dcast(dat, genome + POS + REF + ALT + feature ~ mouse.group, value.var = &quot;AF&quot;) ## Warning in dcast(dat, genome + POS + REF + ALT + feature ~ mouse.group, : The ## dcast generic in data.table has been passed a data.frame and will attempt to ## redirect to the reshape2::dcast; please note that reshape2 is deprecated, and ## this redirection is now deprecated as well. Please do this redirection yourself ## like reshape2::dcast(dat). In the next version, this warning will become an ## error. data.wide &lt;- data.wide[which(data.wide$genome == &quot;I46&quot;),] rownames(data.wide) &lt;- paste0(data.wide$POS, &quot; (&quot;,data.wide$REF, &quot; -&gt; &quot;,data.wide$ALT, &quot;) &quot;, data.wide$feature) heat &lt;- data.matrix(data.wide[,6:9]) heat &lt;- heat[which(rowSums(!is.na(heat))&gt; 2),] # filter uncommon library(circlize) library(ComplexHeatmap) heat[is.na(heat)] &lt;- 0 col_fun = colorRamp2(c(0, 0.5, 1), c(&quot;white&quot;, &quot;yellow&quot;, &quot;red&quot;)) Heatmap(heat, name = &quot;AF&quot;, col = col_fun, row_names_max_width = unit(10, &quot;cm&quot;), column_names_gp = gpar(fontsize = 9), row_names_gp = gpar(fontsize =9 ), show_row_dend = F, show_row_names = T, show_column_dend = F ) 3.9.4 Filter: not in water but in AB 3.9.5 KB1 (Enterococcusfaecalis) dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) #dat &lt;- dat[which(dat$mouse.group == &quot;Water&quot; | dat$mouse.group == &quot;Tetracyclin&quot; ),] data.wide &lt;- dcast(dat, genome + POS + REF + ALT + feature ~ mouse.group, value.var = &quot;AF&quot;) ## Warning in dcast(dat, genome + POS + REF + ALT + feature ~ mouse.group, : The ## dcast generic in data.table has been passed a data.frame and will attempt to ## redirect to the reshape2::dcast; please note that reshape2 is deprecated, and ## this redirection is now deprecated as well. Please do this redirection yourself ## like reshape2::dcast(dat). In the next version, this warning will become an ## error. data.wide &lt;- data.wide[which(data.wide$genome == &quot;KB1&quot;),] rownames(data.wide) &lt;- paste0(data.wide$POS, &quot; (&quot;,data.wide$REF, &quot; -&gt; &quot;,data.wide$ALT, &quot;) &quot;, data.wide$feature) heat &lt;- data.wide[,6:9] heat[is.na(heat)] &lt;- 0 heat &lt;- heat[which(heat$Water &lt; 0.5 &amp; (heat$Ciprofloxacin &gt; 0.5 | heat$Tetracyclin &gt; 0.5 | heat$Vancomycin &gt; 0.5) ),] # filter water heat &lt;- data.matrix(heat) library(circlize) library(ComplexHeatmap) heat[is.na(heat)] &lt;- 0 col_fun = colorRamp2(c(0, 0.5, 1), c(&quot;white&quot;, &quot;yellow&quot;, &quot;red&quot;)) Heatmap(heat, name = &quot;AF&quot;, col = col_fun, column_names_gp = gpar(fontsize = 9), row_names_max_width = unit(15, &quot;cm&quot;), row_names_gp = gpar(fontsize = 9), show_row_dend = F, show_row_names = T, show_column_dend = F ) 3.9.6 YL58 (Blautia coccoides) dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) #dat &lt;- dat[which(dat$mouse.group == &quot;Water&quot; | dat$mouse.group == &quot;Tetracyclin&quot; ),] data.wide &lt;- dcast(dat, genome + POS + REF + ALT + feature ~ mouse.group, value.var = &quot;AF&quot;) ## Warning in dcast(dat, genome + POS + REF + ALT + feature ~ mouse.group, : The ## dcast generic in data.table has been passed a data.frame and will attempt to ## redirect to the reshape2::dcast; please note that reshape2 is deprecated, and ## this redirection is now deprecated as well. Please do this redirection yourself ## like reshape2::dcast(dat). In the next version, this warning will become an ## error. data.wide &lt;- data.wide[which(data.wide$genome == &quot;YL58&quot;),] rownames(data.wide) &lt;- paste0(data.wide$POS, &quot; (&quot;,data.wide$REF, &quot; -&gt; &quot;,data.wide$ALT, &quot;) &quot;, data.wide$feature) heat &lt;- data.wide[,6:9] heat[is.na(heat)] &lt;- 0 heat &lt;- heat[which(heat$Water &lt; 0.5 &amp; (heat$Ciprofloxacin &gt; 0.5 | heat$Tetracyclin &gt; 0.5 | heat$Vancomycin &gt; 0.5) ),] # filter water heat &lt;- data.matrix(heat) library(circlize) library(ComplexHeatmap) heat[is.na(heat)] &lt;- 0 col_fun = colorRamp2(c(0, 0.5, 1), c(&quot;white&quot;, &quot;yellow&quot;, &quot;red&quot;)) Heatmap(heat, name = &quot;AF&quot;, col = col_fun, column_names_gp = gpar(fontsize = 9), row_names_max_width = unit(15, &quot;cm&quot;), row_names_gp = gpar(fontsize = 9), show_row_dend = F, show_row_names = T, show_column_dend = F ) 3.9.7 I46 (Clostridium innocuum) dat &lt;- readRDS(&quot;data/rds/reseq.rds&quot;) #dat &lt;- dat[which(dat$mouse.group == &quot;Water&quot; | dat$mouse.group == &quot;Tetracyclin&quot; ),] data.wide &lt;- dcast(dat, genome + POS + REF + ALT + feature ~ mouse.group, value.var = &quot;AF&quot;) ## Warning in dcast(dat, genome + POS + REF + ALT + feature ~ mouse.group, : The ## dcast generic in data.table has been passed a data.frame and will attempt to ## redirect to the reshape2::dcast; please note that reshape2 is deprecated, and ## this redirection is now deprecated as well. Please do this redirection yourself ## like reshape2::dcast(dat). In the next version, this warning will become an ## error. data.wide &lt;- data.wide[which(data.wide$genome == &quot;I46&quot;),] rownames(data.wide) &lt;- paste0(data.wide$POS, &quot; (&quot;,data.wide$REF, &quot; -&gt; &quot;,data.wide$ALT, &quot;) &quot;, data.wide$feature) heat &lt;- data.wide[,6:9] heat[is.na(heat)] &lt;- 0 heat &lt;- heat[which(heat$Water &lt; 0.5 &amp; (heat$Ciprofloxacin &gt; 0.5 | heat$Tetracyclin &gt; 0.5 | heat$Vancomycin &gt; 0.5) ),] # filter water heat &lt;- data.matrix(heat) library(circlize) library(ComplexHeatmap) heat[is.na(heat)] &lt;- 0 col_fun = colorRamp2(c(0, 0.5, 1), c(&quot;white&quot;, &quot;yellow&quot;, &quot;red&quot;)) Heatmap(heat, name = &quot;AF&quot;, col = col_fun, column_names_gp = gpar(fontsize = 9), row_names_max_width = unit(10, &quot;cm&quot;), row_names_gp = gpar(fontsize = 9), show_row_dend = F, show_row_names = T, show_column_dend = F ) "]
]
